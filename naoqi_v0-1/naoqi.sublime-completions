{
	"scope": "source.py"

	"completions":
	[
		{"trigger:"	"exit	ALModule	CORE","contents": "exit()"},
		{"trigger:"	"getMyPeriod	ALSensorsProxy	SENSORS","contents": "getMyPeriod()"},
		{"trigger:"	"startTracker	ALFaceTrackerProxy	TRACKERS","contents": "startTracker()"},
		{"trigger:"	"waitUntilMoveIsFinished	ALMotionProxy	MOTION","contents": "waitUntilMoveIsFinished()"},
		{"trigger:"	"getAvailableLanguages	ALSpeechRecognitionProxy	AUDIO","contents": "getAvailableLanguages()"},
		{"trigger:"	"setFrameRate	ALVisionExtractor	CORE","contents": "setFrameRate()"},
		{"trigger:"	"setActiveCameras	ALVideoDeviceProxy	VISION","contents": "setActiveCameras(${1:const std::string Name})"},
		{"trigger:"	"getCurrentPeriod	ALExtractor	CORE","contents": "getCurrentPeriod()"},
		{"trigger:"	"getMyPrecision	ALExtractor	CORE","contents": "getMyPrecision()"},
		{"trigger:"	"getPrefix	DCMProxy	SENSORS","contents": "getPrefix()"},
		{"trigger:"	"setSecurityDistance	ALNavigationProxy	MOTION","contents": "setSecurityDistance()"},
		{"trigger:"	"getReferenceImage	ALVisualCompassProxy	VISION","contents": "getReferenceImage()"},
		{"trigger:"	"loadFile	ALAudioPlayerProxy	AUDIO","contents": "loadFile()"},
		{"trigger:"	"getImgSizeFromAngSize	ALVideoDeviceProxy	VISION","contents": "getImgSizeFromAngSize()"},
		{"trigger:"	"getImagePositionFromAngularPosition	ALVideoDeviceProxy	VISION","contents": "getImagePositionFromAngularPosition(${1:const int CameraIndex})"},
		{"trigger:"	"getBrokerName	ALModule	CORE","contents": "getBrokerName()"},
		{"trigger:"	"getGVMFrameRate	ALVideoDeviceProxy	VISION","contents": "getGVMFrameRate()"},
		{"trigger:"	"createAlias	DCMProxy	SENSORS","contents": "createAlias()"},
		{"trigger:"	"getAngSizeFromImgSize	ALVideoDeviceProxy	VISION","contents": "getAngSizeFromImgSize()"},
		{"trigger:"	"openAudioInputs	ALAudioDeviceProxy	AUDIO","contents": "openAudioInputs()"},
		{"trigger:"	"setParamDefault	ALVideoDeviceProxy	VISION","contents": "setParamDefault()"},
		{"trigger:"	"setLanguage	ALTextToSpeechProxy	AUDIO","contents": "setLanguage()"},
		{"trigger:"	"setParameter	ALSoundDetection	AUDIO","contents": "setParameter(${1:const std::string type},${2:const std::string parameter})"},
		{"trigger:"	"walkTo	ALMotionProxy	MOTION","contents": "walkTo(${1:const AL::ALValue controlPoints})"},
		{"trigger:"	"getImageSizeFromAngularSize	ALVideoDeviceProxy	VISION","contents": "getImageSizeFromAngularSize(${1:const int CameraIndex})"},
		{"trigger:"	"getWalkArmsEnabled	ALMotionProxy	MOTION","contents": "getWalkArmsEnabled()"},
		{"trigger:"	"closeHand	ALMotionProxy	MOTION","contents": "closeHand()"},
		{"trigger:"	"setCamerasParameterToDefault	ALVideoDeviceProxy	VISION","contents": "setCamerasParameterToDefault(${1:const std::string Name})"},
		{"trigger:"	"stopMicrophonesRecording	ALAudioDeviceProxy	AUDIO","contents": "stopMicrophonesRecording()"},
		{"trigger:"	"getAngularSizeFromImageSize	ALVideoDeviceProxy	VISION","contents": "getAngularSizeFromImageSize(${1:const int CameraIndex})"},
		{"trigger:"	"getActiveCameras	ALVideoDeviceProxy	VISION","contents": "getActiveCameras()"},
		{"trigger:"	"getMotionCycleTime	ALMotionProxy	MOTION","contents": "getMotionCycleTime()"},
		{"trigger:"	"addDefaultBehavior	ALBehaviorManagerProxy	CORE","contents": "addDefaultBehavior()"},
		{"trigger:"	"setDetectingLength	ALLaserProxy	SENSORS","contents": "setDetectingLength(${1:const int length_min_l})"},
		{"trigger:"	"setParameter	ALVisionExtractor	CORE","contents": "setParameter(${1:const std::string paramName})"},
		{"trigger:"	"isCollision	ALMotionProxy	MOTION","contents": "isCollision()"},
		{"trigger:"	"getDataList	ALResourceManagerProxy	CORE","contents": "getDataList()"},
		{"trigger:"	"getMyPrecision	ALSensorsProxy	SENSORS","contents": "getMyPrecision()"},
		{"trigger:"	"releaseLocalResource	ALResourceManagerProxy	CORE","contents": "releaseLocalResource(${1:const std::string resourceName})"},
		{"trigger:"	"separator	ALLoggerProxy	CORE","contents": "separator()"},
		{"trigger:"	"getMicroEventList	ALMemoryProxy	CORE","contents": "getMicroEventList()"},
		{"trigger:"	"getImageLocal	ALVideoDeviceProxy	VISION","contents": "getImageLocal()"},
		{"trigger:"	"removeDefaultBehavior	ALBehaviorManagerProxy	CORE","contents": "removeDefaultBehavior()"},
		{"trigger:"	"playDefaultProject	ALBehaviorManagerProxy	CORE","contents": "playDefaultProject()"},
		{"trigger:"	"warn	ALLoggerProxy	CORE","contents": "warn(${1:const std::string moduleName})"},
		{"trigger:"	"unsubscribe	ALVideoDeviceProxy	VISION","contents": "unsubscribe()"},
		{"trigger:"	"getSensitivity	ALMovementDetectionProxy	VISION","contents": "getSensitivity()"},
		{"trigger:"	"getActualPoseAndTime	ALRobotPoseProxy	SENSORS","contents": "getActualPoseAndTime()"},
		{"trigger:"	"getDataList	ALMemoryProxy	CORE","contents": "getDataList()"},
		{"trigger:"	"setVideoFormat	ALVideoRecorderProxy	VISION","contents": "setVideoFormat()"},
		{"trigger:"	"pause	ALVisionExtractor	CORE","contents": "pause()"},
		{"trigger:"	"unloadFile	ALAudioPlayerProxy	AUDIO","contents": "unloadFile()"},
		{"trigger:"	"raiseEvent	ALMemoryProxy	CORE","contents": "raiseEvent(${1:const std::string name})"},
		{"trigger:"	"setFootSteps	ALMotionProxy	MOTION","contents": "setFootSteps(${1:const std::vector<std::string> legName},${2:const AL::ALValue footSteps},${3:const std::vector<float> timeList})"},
		{"trigger:"	"getAngles	ALMotionProxy	MOTION","contents": "getAngles(${1:const AL::ALValue names})"},
		{"trigger:"	"setServiceConfiguration	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "setServiceConfiguration()"},
		{"trigger:"	"setAngles	ALMotionProxy	MOTION","contents": "setAngles(${1:const AL::ALValue names},${2:const AL::ALValue angles})"},
		{"trigger:"	"waitForResource	ALResourceManagerProxy	CORE","contents": "waitForResource(${1:const std::string resourceName},${2:const std::string ownerName},${3:const std::string callbackName})"},
		{"trigger:"	"setDescription	ALMemoryProxy	CORE","contents": "setDescription(${1:const std::string name})"},
		{"trigger:"	"getColorSpace	ALVideoDeviceProxy	VISION","contents": "getColorSpace()"},
		{"trigger:"	"getLoadedFilesIds	ALAudioPlayerProxy	AUDIO","contents": "getLoadedFilesIds()"},
		{"trigger:"	"getLanguage	ALSpeechRecognitionProxy	AUDIO","contents": "getLanguage()"},
		{"trigger:"	"listGroups	ALLeds	SENSORS","contents": "listGroups()"},
		{"trigger:"	"wbSetEffectorControl	ALMotionProxy	MOTION","contents": "wbSetEffectorControl(${1:const std::string effectorName})"},
		{"trigger:"	"waitForLocalResources	ALResourceManagerProxy	CORE","contents": "waitForLocalResources(${1:const std::vector<std::string> resourceNameList},${2:const boost::shared_ptr<AL::ALOwner> owner},${3:const std::string callbackName})"},
		{"trigger:"	"subscribe	ALSoundDetection	AUDIO","contents": "subscribe()"},
		{"trigger:"	"stopAll	ALAudioPlayerProxy	AUDIO","contents": "stopAll()"},
		{"trigger:"	"getOutputNames	ALSensorsProxy	SENSORS","contents": "getOutputNames()"},
		{"trigger:"	"getColorSpaces	ALVideoDeviceProxy	VISION","contents": "getColorSpaces()"},
		{"trigger:"	"getRobotVelocity	ALMotionProxy	MOTION","contents": "getRobotVelocity()"},
		{"trigger:"	"disableTethering	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "disableTethering()"},
		{"trigger:"	"runBehavior	ALBehaviorManagerProxy	CORE","contents": "runBehavior()"},
		{"trigger:"	"setMasterVolume	ALAudioPlayerProxy	AUDIO","contents": "setMasterVolume()"},
		{"trigger:"	"releaseImage	ALVideoDeviceProxy	VISION","contents": "releaseImage()"},
		{"trigger:"	"setIntensity	ALLeds	SENSORS","contents": "setIntensity(${1:const std::string name})"},
		{"trigger:"	"getResolution	ALVideoDeviceProxy	VISION","contents": "getResolution()"},
		{"trigger:"	"getFootGaitConfig	ALMotionProxy	MOTION","contents": "getFootGaitConfig()"},
		{"trigger:"	"setResolutions	ALVideoDeviceProxy	VISION","contents": "setResolutions(${1:const std::string Name})"},
		{"trigger:"	"send8	ALInfraredProxy	SENSORS","contents": "send8()"},
		{"trigger:"	"getVolume	ALTextToSpeechProxy	AUDIO","contents": "getVolume()"},
		{"trigger:"	"getVIMFrameRate	ALVideoDeviceProxy	VISION","contents": "getVIMFrameRate()"},
		{"trigger:"	"enableTethering	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "enableTethering(${1:const std::string technology},${2:const std::string name})"},
		{"trigger:"	"stopFrameGrabber	ALVideoDeviceProxy	VISION","contents": "stopFrameGrabber()"},
		{"trigger:"	"getNextRobotPosition	ALMotionProxy	MOTION","contents": "getNextRobotPosition()"},
		{"trigger:"	"getDirectRawImagesRemote	ALVideoDeviceProxy	VISION","contents": "getDirectRawImagesRemote()"},
		{"trigger:"	"killTask	ALMotionProxy	MOTION","contents": "killTask()"},
		{"trigger:"	"angleInterpolationWithSpeed	ALMotionProxy	MOTION","contents": "angleInterpolationWithSpeed(${1:const AL::ALValue names},${2:const AL::ALValue targetAngles})"},
		{"trigger:"	"loadVocabulary	ALSpeechRecognitionProxy	AUDIO","contents": "loadVocabulary()"},
		{"trigger:"	"setFrameRate	ALVideoRecorderProxy	VISION","contents": "setFrameRate()"},
		{"trigger:"	"getTime	DCMProxy	SENSORS","contents": "getTime()"},
		{"trigger:"	"getCurrentImage	ALVisualCompassProxy	VISION","contents": "getCurrentImage()"},
		{"trigger:"	"stopAndGetRecording	ALMotionRecorder	MOTION","contents": "stopAndGetRecording()"},
		{"trigger:"	"fade	ALLeds	SENSORS","contents": "fade(${1:const std::string name},${2:const float intensity})"},
		{"trigger:"	"disconnect	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "disconnect()"},
		{"trigger:"	"unsubscribe	ALSpeechRecognitionProxy	AUDIO","contents": "unsubscribe()"},
		{"trigger:"	"deleteResource	ALResourceManagerProxy	CORE","contents": "deleteResource(${1:const std::string resourceName})"},
		{"trigger:"	"initReception	ALInfraredProxy	SENSORS","contents": "initReception()"},
		{"trigger:"	"playSine	ALAudioDeviceProxy	AUDIO","contents": "playSine(${1:const int frequence},${2:const int gain},${3:const int pan})"},
		{"trigger:"	"wbEnableEffectorOptimization	ALMotionProxy	MOTION","contents": "wbEnableEffectorOptimization(${1:const std::string effectorName})"},
		{"trigger:"	"setDarknessThreshold	ALDarknessDetectionProxy	VISION","contents": "setDarknessThreshold()"},
		{"trigger:"	"angleInterpolationBezier	ALMotionProxy	MOTION","contents": "angleInterpolationBezier(${1:const std::vector<std::string> jointNames},${2:const AL::ALValue times})"},
		{"trigger:"	"flushAudioOutputs	ALAudioDeviceProxy	AUDIO","contents": "flushAudioOutputs()"},
		{"trigger:"	"setAudioExpression	ALSpeechRecognitionProxy	AUDIO","contents": "setAudioExpression()"},
		{"trigger:"	"onClientDisconnected	ALVideoDeviceProxy	VISION","contents": "onClientDisconnected(${1:const std::string eventName},${2:const AL::ALValue eventContents})"},
		{"trigger:"	"updateTrackerTarget	ALMotionProxy	MOTION","contents": "updateTrackerTarget(${1:const float pTargetPositionWy},${2:const float pTargetPositionWz},${3:const int pTimeSinceDetectionMs})"},
		{"trigger:"	"setCameraParameter	ALVideoDeviceProxy	VISION","contents": "setCameraParameter(${1:const std::string Name},${2:const int Id})"},
		{"trigger:"	"setWalkTargetVelocity	ALMotionProxy	MOTION","contents": "setWalkTargetVelocity(${1:const float x},${2:const float y},${3:const float theta},${4:const float frequency},${5:const AL::ALValue leftFootGaitConfig})"},
		{"trigger:"	"logInForwarder	ALLoggerProxy	CORE","contents": "logInForwarder()"},
		{"trigger:"	"putImage	ALVideoDeviceProxy	VISION","contents": "putImage()"},
		{"trigger:"	"disableNotifications	ALTextToSpeechProxy	AUDIO","contents": "disableNotifications()"},
		{"trigger:"	"setWalkArmsEnabled	ALMotionProxy	MOTION","contents": "setWalkArmsEnabled(${1:const bool leftArmEnable})"},
		{"trigger:"	"getAngPosFromImgPos	ALVideoDeviceProxy	VISION","contents": "getAngPosFromImgPos()"},
		{"trigger:"	"getGVMResolution	ALVideoDeviceProxy	VISION","contents": "getGVMResolution()"},
		{"trigger:"	"setParam	ALVideoDeviceProxy	VISION","contents": "setParam(${1:const int Param})"},
		{"trigger:"	"isInGroup	ALResourceManagerProxy	CORE","contents": "isInGroup(${1:const std::string resourceGroupName})"},
		{"trigger:"	"technologies	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "technologies()"},
		{"trigger:"	"getResolution	ALVisionExtractor	CORE","contents": "getResolution()"},
		{"trigger:"	"stiffnessInterpolation	ALMotionProxy	MOTION","contents": "stiffnessInterpolation(${1:const AL::ALValue names},${2:const AL::ALValue stiffnessLists})"},
		{"trigger:"	"takePicture	ALVisionToolboxProxy	VISION","contents": "takePicture()"},
		{"trigger:"	"rest	ALMotionProxy	MOTION","contents": "rest()"},
		{"trigger:"	"subscribeCameras	ALVideoDeviceProxy	VISION","contents": "subscribeCameras(${1:const std::string Name},${2:const AL::ALValue CameraIndexes},${3:const AL::ALValue Resolutions},${4:const AL::ALValue ColorSpaces})"},
		{"trigger:"	"getDescriptionList	ALMemoryProxy	CORE","contents": "getDescriptionList()"},
		{"trigger:"	"openAudioOutputs	ALAudioDeviceProxy	AUDIO","contents": "openAudioOutputs()"},
		{"trigger:"	"getLimits	ALMotionProxy	MOTION","contents": "getLimits()"},
		{"trigger:"	"service	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "service()"},
		{"trigger:"	"launchLocal	ALLauncherProxy	CORE","contents": "launchLocal()"},
		{"trigger:"	"getMoveConfig	ALMotionProxy	MOTION","contents": "getMoveConfig()"},
		{"trigger:"	"startRecording	ALVideoRecorderProxy	VISION","contents": "startRecording(${1:const std::string folderPath},${2:const std::string fileName})"},
		{"trigger:"	"setParameter	ALSpeechRecognitionProxy	AUDIO","contents": "setParameter(${1:const std::string parameter})"},
		{"trigger:"	"wakeUp	ALMotionProxy	MOTION","contents": "wakeUp()"},
		{"trigger:"	"stopVideo	ALVideoDeviceProxy	VISION","contents": "stopVideo()"},
		{"trigger:"	"listLED	ALLeds	SENSORS","contents": "listLED()"},
		{"trigger:"	"wait	ALModule	CORE","contents": "wait(${1:const int id})"},
		{"trigger:"	"isNewData	ALFaceTrackerProxy	TRACKERS","contents": "isNewData()"},
		{"trigger:"	"stopAllBehaviors	ALBehaviorManagerProxy	CORE","contents": "stopAllBehaviors()"},
		{"trigger:"	"releaseResource	ALResourceManagerProxy	CORE","contents": "releaseResource(${1:const std::string resourceName})"},
		{"trigger:"	"setCamerasParameter	ALVideoDeviceProxy	VISION","contents": "setCamerasParameter(${1:const std::string Name},${2:const int Id})"},
		{"trigger:"	"subscribe	ALExtractor	CORE","contents": "subscribe()"},
		{"trigger:"	"takePictures	ALPhotoCaptureProxy	VISION","contents": "takePictures(${1:const int numberOfPictures},${2:const std::string folderPath},${3:const std::string fileName})"},
		{"trigger:"	"stopWalk	ALMotionProxy	MOTION","contents": "stopWalk()"},
		{"trigger:"	"disableEnergyComputation	ALAudioDeviceProxy	AUDIO","contents": "disableEnergyComputation()"},
		{"trigger:"	"enableRecognition	ALFaceDetectionProxy	VISION","contents": "enableRecognition()"},
		{"trigger:"	"unsubscribe	ALExtractor	CORE","contents": "unsubscribe()"},
		{"trigger:"	"playWebStream	ALAudioPlayerProxy	AUDIO","contents": "playWebStream(${1:const std::string streamName},${2:const float volume})"},
		{"trigger:"	"listGroup	ALLeds	SENSORS","contents": "listGroup()"},
		{"trigger:"	"removeBehavior	ALBehaviorManagerProxy	CORE","contents": "removeBehavior()"},
		{"trigger:"	"getExpectedImageParameters	ALVideoDeviceProxy	VISION","contents": "getExpectedImageParameters()"},
		{"trigger:"	"getTaskList	ALMotionProxy	MOTION","contents": "getTaskList()"},
		{"trigger:"	"getSubscribers	ALMemoryProxy	CORE","contents": "getSubscribers()"},
		{"trigger:"	"launchScript	ALLauncherProxy	CORE","contents": "launchScript()"},
		{"trigger:"	"enableNotifications	ALTextToSpeechProxy	AUDIO","contents": "enableNotifications()"},
		{"trigger:"	"getBehaviorNames	ALBehaviorManagerProxy	CORE","contents": "getBehaviorNames()"},
		{"trigger:"	"getDirectRawImageRemote	ALVideoDeviceProxy	VISION","contents": "getDirectRawImageRemote()"},
		{"trigger:"	"getRobotConfig	ALMotionProxy	MOTION","contents": "getRobotConfig()"},
		{"trigger:"	"getFallManagerEnabled	ALMotionProxy	MOTION","contents": "getFallManagerEnabled()"},
		{"trigger:"	"getTransform	ALMotionProxy	MOTION","contents": "getTransform(${1:const std::string name},${2:const int space})"},
		{"trigger:"	"isPaused	ALVisionExtractor	CORE","contents": "isPaused()"},
		{"trigger:"	"waitUntilWalkIsFinished	ALMotionProxy	MOTION","contents": "waitUntilWalkIsFinished()"},
		{"trigger:"	"say	ALTextToSpeechProxy	AUDIO","contents": "say()"},
		{"trigger:"	"getVIMColorSpace	ALVideoDeviceProxy	VISION","contents": "getVIMColorSpace()"},
		{"trigger:"	"on	ALLeds	SENSORS","contents": "on()"},
		{"trigger:"	"setCameraParameterToDefault	ALVideoDeviceProxy	VISION","contents": "setCameraParameterToDefault(${1:const std::string Name})"},
		{"trigger:"	"getDirectRawImageLocal	ALVideoDeviceProxy	VISION","contents": "getDirectRawImageLocal()"},
		{"trigger:"	"wbFootState	ALMotionProxy	MOTION","contents": "wbFootState(${1:const std::string stateName})"},
		{"trigger:"	"setResolution	ALPhotoCaptureProxy	VISION","contents": "setResolution()"},
		{"trigger:"	"isNewData	ALRedBallTrackerProxy	TRACKERS","contents": "isNewData()"},
		{"trigger:"	"setPictureFormat	ALPhotoCaptureProxy	VISION","contents": "setPictureFormat()"},
		{"trigger:"	"killTasksUsingResources	ALMotionProxy	MOTION","contents": "killTasksUsingResources()"},
		{"trigger:"	"createGroup	ALLeds	SENSORS","contents": "createGroup(${1:const std::string groupName})"},
		{"trigger:"	"removeHandler	ALLoggerProxy	CORE","contents": "removeHandler()"},
		{"trigger:"	"getParameter	ALTextToSpeechProxy	AUDIO","contents": "getParameter()"},
		{"trigger:"	"killMove	ALMotionProxy	MOTION","contents": "killMove()"},
		{"trigger:"	"releaseDirectRawImages	ALVideoDeviceProxy	VISION","contents": "releaseDirectRawImages()"},
		{"trigger:"	"tetheringName	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "tetheringName()"},
		{"trigger:"	"setSensitivity	ALMovementDetectionProxy	VISION","contents": "setSensitivity()"},
		{"trigger:"	"getParam	ALVideoDeviceProxy	VISION","contents": "getParam()"},
		{"trigger:"	"getImagesLocal	ALVideoDeviceProxy	VISION","contents": "getImagesLocal()"},
		{"trigger:"	"areResourcesAvailable	ALMotionProxy	MOTION","contents": "areResourcesAvailable()"},
		{"trigger:"	"updatePeriod	ALExtractor	CORE","contents": "updatePeriod(${1:const std::string pSubscribedName})"},
		{"trigger:"	"enableTracking	ALFaceDetectionProxy	VISION","contents": "enableTracking()"},
		{"trigger:"	"startMicrophonesRecording	ALAudioDeviceProxy	AUDIO","contents": "startMicrophonesRecording()"},
		{"trigger:"	"getImagesRemote	ALVideoDeviceProxy	VISION","contents": "getImagesRemote()"},
		{"trigger:"	"setClientPreferences	ALAudioDeviceProxy	AUDIO","contents": "setClientPreferences(${1:const std::string name},${2:const int sampleRate},${3:const int channels})"},
		{"trigger:"	"getPoseNames	ALRobotPoseProxy	SENSORS","contents": "getPoseNames()"},
		{"trigger:"	"setColorSpaces	ALVideoDeviceProxy	VISION","contents": "setColorSpaces(${1:const std::string Name})"},
		{"trigger:"	"send32	ALInfraredProxy	SENSORS","contents": "send32(${1:const int Octet1},${2:const int Octet2},${3:const int Octet3})"},
		{"trigger:"	"setParameter	ALAudioSourceLocalizationProxy	AUDIO","contents": "setParameter(${1:const std::string parameter})"},
		{"trigger:"	"getFileLength	ALAudioPlayerProxy	AUDIO","contents": "getFileLength()"},
		{"trigger:"	"logInFile	ALLoggerProxy	CORE","contents": "logInFile()"},
		{"trigger:"	"unsubscribe	ALSoundDetection	AUDIO","contents": "unsubscribe()"},
		{"trigger:"	"startInteractiveRecording	ALMotionRecorder	MOTION","contents": "startInteractiveRecording(${1:const std::vector<std::string> jointsToRecord},${2:const int nbPoses},${3:const bool extensionAllowed})"},
		{"trigger:"	"getPostureFamily	ALRobotPosture	MOTION","contents": "getPostureFamily()"},
		{"trigger:"	"subscribeRemoteModule	ALAudioDeviceProxy	AUDIO","contents": "subscribeRemoteModule()"},
		{"trigger:"	"isBehaviorInstalled	ALBehaviorManagerProxy	CORE","contents": "isBehaviorInstalled()"},
		{"trigger:"	"updatePrecision	ALSensorsProxy	SENSORS","contents": "updatePrecision(${1:const std::string name})"},
		{"trigger:"	"getGVMColorSpace	ALVideoDeviceProxy	VISION","contents": "getGVMColorSpace()"},
		{"trigger:"	"launchPythonModule	ALLauncherProxy	CORE","contents": "launchPythonModule()"},
		{"trigger:"	"getParameter	ALAudioDeviceProxy	AUDIO","contents": "getParameter()"},
		{"trigger:"	"stopRecording	ALVideoRecorderProxy	VISION","contents": "stopRecording()"},
		{"trigger:"	"error	ALLoggerProxy	CORE","contents": "error(${1:const std::string moduleName})"},
		{"trigger:"	"removeData	ALMemoryProxy	CORE","contents": "removeData()"},
		{"trigger:"	"setActiveCamera	ALVideoDeviceProxy	VISION","contents": "setActiveCamera(${1:const std::string Name})"},
		{"trigger:"	"getImgPosFromAngPos	ALVideoDeviceProxy	VISION","contents": "getImgPosFromAngPos()"},
		{"trigger:"	"setColorSpace	ALVideoRecorderProxy	VISION","contents": "setColorSpace()"},
		{"trigger:"	"getColorSpace	ALVideoRecorderProxy	VISION","contents": "getColorSpace()"},
		{"trigger:"	"setResolution	ALVideoDeviceProxy	VISION","contents": "setResolution(${1:const std::string Name})"},
		{"trigger:"	"getCameraParameter	ALVideoDeviceProxy	VISION","contents": "getCameraParameter(${1:const std::string Name})"},
		{"trigger:"	"unsubscribeToMicroEvent	ALMemoryProxy	CORE","contents": "unsubscribeToMicroEvent(${1:const std::string name})"},
		{"trigger:"	"updatePrecision	ALExtractor	CORE","contents": "updatePrecision(${1:const std::string pSubscribedName})"},
		{"trigger:"	"forgetPerson	ALFaceDetectionProxy	VISION","contents": "forgetPerson()"},
		{"trigger:"	"raiseMicroEvent	ALMemoryProxy	CORE","contents": "raiseMicroEvent(${1:const std::string name})"},
		{"trigger:"	"getCurrentPeriod	ALSensorsProxy	SENSORS","contents": "getCurrentPeriod()"},
		{"trigger:"	"setParameter	ALTextToSpeechProxy	AUDIO","contents": "setParameter(${1:const std::string parameter})"},
		{"trigger:"	"setFilter	ALLoggerProxy	CORE","contents": "setFilter()"},
		{"trigger:"	"fadeRGB	ALLeds	SENSORS","contents": "fadeRGB(${1:const std::string name},${2:const int rgb})"},
		{"trigger:"	"getDataListName	ALMemoryProxy	CORE","contents": "getDataListName()"},
		{"trigger:"	"isActive	ALFaceTrackerProxy	TRACKERS","contents": "isActive()"},
		{"trigger:"	"getSummary	ALMotionProxy	MOTION","contents": "getSummary()"},
		{"trigger:"	"laserOFF	ALLaserProxy	SENSORS","contents": "laserOFF()"},
		{"trigger:"	"stopVideoRecord	ALVisionToolboxProxy	VISION","contents": "stopVideoRecord()"},
		{"trigger:"	"ping	ALModule	CORE","contents": "ping()"},
		{"trigger:"	"changePosition	ALMotionProxy	MOTION","contents": "changePosition(${1:const std::string effectorName},${2:const int space},${3:const std::vector<float> positionChange},${4:const float fractionMaxSpeed})"},
		{"trigger:"	"info	ALLoggerProxy	CORE","contents": "info(${1:const std::string moduleName})"},
		{"trigger:"	"getUsage	ALModule	CORE","contents": "getUsage()"},
		{"trigger:"	"isItDark	ALVisionToolboxProxy	VISION","contents": "isItDark()"},
		{"trigger:"	"getLeftMicEnergy	ALAudioDeviceProxy	AUDIO","contents": "getLeftMicEnergy()"},
		{"trigger:"	"setMaxTryNumber	ALRobotPosture	MOTION","contents": "setMaxTryNumber()"},
		{"trigger:"	"moveToward	ALMotionProxy	MOTION","contents": "moveToward(${1:const float x},${2:const float y},${3:const float theta})"},
		{"trigger:"	"getPostureList	ALRobotPosture	MOTION","contents": "getPostureList()"},
		{"trigger:"	"moveTo	ALNavigationProxy	MOTION","contents": "moveTo(${1:const float x},${2:const float y},${3:const float theta})"},
		{"trigger:"	"setActiveCamera	ALVisionExtractor	CORE","contents": "setActiveCamera()"},
		{"trigger:"	"getInstalledBehaviors	ALBehaviorManagerProxy	CORE","contents": "getInstalledBehaviors()"},
		{"trigger:"	"getFrameRate	ALVideoRecorderProxy	VISION","contents": "getFrameRate()"},
		{"trigger:"	"setPosition	ALMotionProxy	MOTION","contents": "setPosition(${1:const std::string chainName},${2:const int space},${3:const std::vector<float> position},${4:const float fractionMaxSpeed})"},
		{"trigger:"	"isTrackingEnabled	ALFaceDetectionProxy	VISION","contents": "isTrackingEnabled()"},
		{"trigger:"	"run	ALSensorsProxy	SENSORS","contents": "run()"},
		{"trigger:"	"subscribe	ALAudioSourceLocalizationProxy	AUDIO","contents": "subscribe()"},
		{"trigger:"	"angleInterpolation	ALMotionProxy	MOTION","contents": "angleInterpolation(${1:const AL::ALValue names},${2:const AL::ALValue angleLists},${3:const AL::ALValue timeLists})"},
		{"trigger:"	"tetheringPassphrase	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "tetheringPassphrase()"},
		{"trigger:"	"getMass	ALMotionProxy	MOTION","contents": "getMass()"},
		{"trigger:"	"writePrefFile	ALPreferencesProxy	CORE","contents": "writePrefFile(${1:const std::string fileName},${2:const AL::ALValue prefs})"},
		{"trigger:"	"unsubscribeAllInstances	ALVideoDeviceProxy	VISION","contents": "unsubscribeAllInstances()"},
		{"trigger:"	"getRightMicEnergy	ALAudioDeviceProxy	AUDIO","contents": "getRightMicEnergy()"},
		{"trigger:"	"unsubscribe	ALAudioDeviceProxy	AUDIO","contents": "unsubscribe()"},
		{"trigger:"	"forget	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "forget()"},
		{"trigger:"	"unsubscribe	ALSensorsProxy	SENSORS","contents": "unsubscribe()"},
		{"trigger:"	"fadeListRGB	ALLeds	SENSORS","contents": "fadeListRGB(${1:const std::string name},${2:const AL::ALValue rgbList})"},
		{"trigger:"	"waitForLocalResource	ALResourceManagerProxy	CORE","contents": "waitForLocalResource(${1:const std::string resourceName},${2:const boost::shared_ptr<AL::ALOwner> ownerPtr},${3:const std::string callbackName})"},
		{"trigger:"	"playSine	ALAudioPlayerProxy	AUDIO","contents": "playSine(${1:const int frequence},${2:const int gain},${3:const int pan})"},
		{"trigger:"	"getTetheringEnable	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "getTetheringEnable()"},
		{"trigger:"	"isFrameGrabberOff	ALVideoDeviceProxy	VISION","contents": "isFrameGrabberOff()"},
		{"trigger:"	"sendRemoteKey	ALInfraredProxy	SENSORS","contents": "sendRemoteKey(${1:const std::string Remote})"},
		{"trigger:"	"getListData	ALMemoryProxy	CORE","contents": "getListData()"},
		{"trigger:"	"releaseResources	ALResourceManagerProxy	CORE","contents": "releaseResources(${1:const std::vector<std::string> resourceNames})"},
		{"trigger:"	"isProcessing	ALVisionExtractor	CORE","contents": "isProcessing()"},
		{"trigger:"	"insertData	ALMemoryProxy	CORE","contents": "insertData(${1:const std::string key})"},
		{"trigger:"	"fatal	ALLoggerProxy	CORE","contents": "fatal(${1:const std::string moduleName})"},
		{"trigger:"	"startVideoRecord_adv	ALVisionToolboxProxy	VISION","contents": "startVideoRecord_adv(${1:const std::string videoName},${2:const float framerate},${3:const std::string format},${4:const int resIndex})"},
		{"trigger:"	"releaseImages	ALVideoDeviceProxy	VISION","contents": "releaseImages()"},
		{"trigger:"	"saveToMemory	ALPreferencesProxy	CORE","contents": "saveToMemory()"},
		{"trigger:"	"getMatchingQuality	ALVisualCompassProxy	VISION","contents": "getMatchingQuality()"},
		{"trigger:"	"startMicrophonesRecording	ALAudioRecorderProxy	AUDIO","contents": "startMicrophonesRecording(${1:const std::string filename},${2:const std::string type},${3:const int samplerate})"},
		{"trigger:"	"getStiffnesses	ALMotionProxy	MOTION","contents": "getStiffnesses()"},
		{"trigger:"	"declareEvent	ALMemoryProxy	CORE","contents": "declareEvent(${1:const std::string eventName})"},
		{"trigger:"	"getCaptureInterval	ALPhotoCaptureProxy	VISION","contents": "getCaptureInterval()"},
		{"trigger:"	"getDescription	ALSoundDetection	AUDIO","contents": "getDescription(${1:const std::string type})"},
		{"trigger:"	"getCollisionProtectionEnabled	ALMotionProxy	MOTION","contents": "getCollisionProtectionEnabled()"},
		{"trigger:"	"setColorSpace	ALPhotoCaptureProxy	VISION","contents": "setColorSpace()"},
		{"trigger:"	"getPosition	ALMotionProxy	MOTION","contents": "getPosition(${1:const std::string name},${2:const int space})"},
		{"trigger:"	"getSubscribersInfo	ALSensorsProxy	SENSORS","contents": "getSubscribersInfo()"},
		{"trigger:"	"setWholeBodyOn	ALFaceTrackerProxy	TRACKERS","contents": "setWholeBodyOn()"},
		{"trigger:"	"setFallManagerEnabled	ALMotionProxy	MOTION","contents": "setFallManagerEnabled()"},
		{"trigger:"	"positionInterpolation	ALMotionProxy	MOTION","contents": "positionInterpolation(${1:const std::string chainName},${2:const int space},${3:const AL::ALValue path},${4:const int axisMask},${5:const AL::ALValue durations})"},
		{"trigger:"	"debug	ALLoggerProxy	CORE","contents": "debug(${1:const std::string moduleName})"},
		{"trigger:"	"createResource	ALResourceManagerProxy	CORE","contents": "createResource(${1:const std::string resourceName})"},
		{"trigger:"	"walkIsActive	ALMotionProxy	MOTION","contents": "walkIsActive()"},
		{"trigger:"	"killAll	ALMotionProxy	MOTION","contents": "killAll()"},
		{"trigger:"	"setWholeBodyOn	ALRedBallTrackerProxy	TRACKERS","contents": "setWholeBodyOn()"},
		{"trigger:"	"getCamerasParameter	ALVideoDeviceProxy	VISION","contents": "getCamerasParameter(${1:const std::string Name})"},
		{"trigger:"	"getColorSpace	ALPhotoCaptureProxy	VISION","contents": "getColorSpace()"},
		{"trigger:"	"setServiceInput	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "setServiceInput()"},
		{"trigger:"	"startFrameGrabber	ALVideoDeviceProxy	VISION","contents": "startFrameGrabber()"},
		{"trigger:"	"isBehaviorRunning	ALBehaviorManagerProxy	CORE","contents": "isBehaviorRunning()"},
		{"trigger:"	"setMotionConfig	ALMotionProxy	MOTION","contents": "setMotionConfig()"},
		{"trigger:"	"enableEnergyComputation	ALAudioDeviceProxy	AUDIO","contents": "enableEnergyComputation()"},
		{"trigger:"	"getEventList	ALMemoryProxy	CORE","contents": "getEventList()"},
		{"trigger:"	"getMyPeriod	ALExtractor	CORE","contents": "getMyPeriod()"},
		{"trigger:"	"isVideoRecording	ALVisionToolboxProxy	VISION","contents": "isVideoRecording()"},
		{"trigger:"	"setVerbosity	ALLoggerProxy	CORE","contents": "setVerbosity()"},
		{"trigger:"	"unsubscribe	ALAudioSourceLocalizationProxy	AUDIO","contents": "unsubscribe()"},
		{"trigger:"	"learnFace	ALFaceDetectionProxy	VISION","contents": "learnFace()"},
		{"trigger:"	"halfPress	ALVisionToolboxProxy	VISION","contents": "halfPress()"},
		{"trigger:"	"getImgInfoFromAngInfoWithRes	ALVideoDeviceProxy	VISION","contents": "getImgInfoFromAngInfoWithRes(${1:const std::vector<float> angInfo})"},
		{"trigger:"	"preferences	DCMProxy	SENSORS","contents": "preferences(${1:const std::string action},${2:const std::string target},${3:const std::string keyName})"},
		{"trigger:"	"randomEyes	ALLeds	SENSORS","contents": "randomEyes()"},
		{"trigger:"	"logInSys	ALLoggerProxy	CORE","contents": "logInSys()"},
		{"trigger:"	"setLanguage	ALSpeechRecognitionProxy	AUDIO","contents": "setLanguage()"},
		{"trigger:"	"changeDatabase	ALVisionRecognitionProxy	VISION","contents": "changeDatabase(${1:const std::string databasePath})"},
		{"trigger:"	"enableReferenceRefresh	ALVisualCompassProxy	VISION","contents": "enableReferenceRefresh()"},
		{"trigger:"	"subscribeToEvent	ALMemoryProxy	CORE","contents": "subscribeToEvent(${1:const std::string name},${2:const std::string callbackModule},${3:const std::string callbackMessage})"},
		{"trigger:"	"stopTPR	ALVisionToolboxProxy	VISION","contents": "stopTPR(${1:const std::string pathAndNameRoot})"},
		{"trigger:"	"getOutputNames	ALExtractor	CORE","contents": "getOutputNames()"},
		{"trigger:"	"setVisualExpression	ALSpeechRecognitionProxy	AUDIO","contents": "setVisualExpression()"},
		{"trigger:"	"sendRemoteBufferToOutput	ALAudioDeviceProxy	AUDIO","contents": "sendRemoteBufferToOutput(${1:const int nbOfFrames})"},
		{"trigger:"	"transformInterpolations	ALMotionProxy	MOTION","contents": "transformInterpolations(${1:const std::vector<std::string> effectorNames},${2:const int taskSpaceForAllPaths},${3:const AL::ALValue paths},${4:const AL::ALValue axisMasks},${5:const AL::ALValue relativeTimes})"},
		{"trigger:"	"setSmartStiffnessEnabled	ALMotionProxy	MOTION","contents": "setSmartStiffnessEnabled()"},
		{"trigger:"	"connect	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "connect()"},
		{"trigger:"	"removeMicroEvent	ALMemoryProxy	CORE","contents": "removeMicroEvent()"},
		{"trigger:"	"services	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "services()"},
		{"trigger:"	"setOutputVolume	ALAudioDeviceProxy	AUDIO","contents": "setOutputVolume()"},
		{"trigger:"	"rotateEyes	ALLeds	SENSORS","contents": "rotateEyes(${1:const int rgb},${2:const float timeForRotation})"},
		{"trigger:"	"isRunning	ALModule	CORE","contents": "isRunning()"},
		{"trigger:"	"getDataListName	ALResourceManagerProxy	CORE","contents": "getDataListName()"},
		{"trigger:"	"getAvailableLanguages	ALTextToSpeechProxy	AUDIO","contents": "getAvailableLanguages()"},
		{"trigger:"	"stop	ALModule	CORE","contents": "stop()"},
		{"trigger:"	"isActive	ALRedBallTrackerProxy	TRACKERS","contents": "isActive()"},
		{"trigger:"	"unsubscribeToEvent	ALMemoryProxy	CORE","contents": "unsubscribeToEvent(${1:const std::string name})"},
		{"trigger:"	"getJointNames	ALMotionProxy	MOTION","contents": "getJointNames()"},
		{"trigger:"	"isModulePresent	ALLauncherProxy	CORE","contents": "isModulePresent()"},
		{"trigger:"	"getCurrentPrecision	ALSensorsProxy	SENSORS","contents": "getCurrentPrecision()"},
		{"trigger:"	"subscribeCamera	ALVideoDeviceProxy	VISION","contents": "subscribeCamera(${1:const std::string Name},${2:const int CameraIndex},${3:const int Resolution},${4:const int ColorSpace})"},
		{"trigger:"	"setWordListAsVocabulary	ALSpeechRecognitionProxy	AUDIO","contents": "setWordListAsVocabulary()"},
		{"trigger:"	"setResolution	ALVideoRecorderProxy	VISION","contents": "setResolution()"},
		{"trigger:"	"subscribe	ALSensorsProxy	SENSORS","contents": "subscribe()"},
		{"trigger:"	"setVolume	ALTextToSpeechProxy	AUDIO","contents": "setVolume()"},
		{"trigger:"	"installBehavior	ALBehaviorManagerProxy	CORE","contents": "installBehavior()"},
		{"trigger:"	"special	DCMProxy	SENSORS","contents": "special()"},
		{"trigger:"	"getCameraModelID	ALVideoDeviceProxy	VISION","contents": "getCameraModelID()"},
		{"trigger:"	"updatePeriod	ALSensorsProxy	SENSORS","contents": "updatePeriod(${1:const std::string name})"},
		{"trigger:"	"unloadAllFiles	ALAudioPlayerProxy	AUDIO","contents": "unloadAllFiles()"},
		{"trigger:"	"getEvents	ALSoundDetection	AUDIO","contents": "getEvents()"},
		{"trigger:"	"move	ALMotionProxy	MOTION","contents": "move(${1:const float x},${2:const float y},${3:const float theta})"},
		{"trigger:"	"sendRemoteKeyWithTime	ALInfraredProxy	SENSORS","contents": "sendRemoteKeyWithTime(${1:const std::string Remote},${2:const std::string Key})"},
		{"trigger:"	"subscribeToMicroEvent	ALMemoryProxy	CORE","contents": "subscribeToMicroEvent(${1:const std::string name},${2:const std::string callbackModule},${3:const std::string callbackMessage})"},
		{"trigger:"	"getResolution	ALPhotoCaptureProxy	VISION","contents": "getResolution()"},
		{"trigger:"	"getSystemBehaviorNames	ALBehaviorManagerProxy	CORE","contents": "getSystemBehaviorNames()"},
		{"trigger:"	"setSimCamInputSize	ALVideoDeviceProxy	VISION","contents": "setSimCamInputSize(${1:const int Width})"},
		{"trigger:"	"startPeriodicRecording	ALMotionRecorder	MOTION","contents": "startPeriodicRecording(${1:const std::vector<std::string> jointsToRecord},${2:const int nbPoses},${3:const bool extensionAllowed},${4:const float timeStep},${5:const std::vector<std::string> jointsToReplay})"},
		{"trigger:"	"version	ALModule	CORE","contents": "version()"},
		{"trigger:"	"openHand	ALMotionProxy	MOTION","contents": "openHand()"},
		{"trigger:"	"getImageRemote	ALVideoDeviceProxy	VISION","contents": "getImageRemote()"},
		{"trigger:"	"applyPosture	ALRobotPosture	MOTION","contents": "applyPosture(${1:const std::string postureName})"},
		{"trigger:"	"lowDebug	ALLoggerProxy	CORE","contents": "lowDebug(${1:const std::string moduleName})"},
		{"trigger:"	"getDirectRawImagesLocal	ALVideoDeviceProxy	VISION","contents": "getDirectRawImagesLocal()"},
		{"trigger:"	"getVIMResolution	ALVideoDeviceProxy	VISION","contents": "getVIMResolution()"},
		{"trigger:"	"goTo	ALAudioPlayerProxy	AUDIO","contents": "goTo(${1:const int taskId})"},
		{"trigger:"	"getPosition	ALRedBallTrackerProxy	TRACKERS","contents": "getPosition()"},
		{"trigger:"	"subscribe	ALVideoDeviceProxy	VISION","contents": "subscribe(${1:const std::string Name},${2:const int resolution},${3:const int colorSpace})"},
		{"trigger:"	"startTracker	ALRedBallTrackerProxy	TRACKERS","contents": "startTracker()"},
		{"trigger:"	"getDataOnChange	ALMemoryProxy	CORE","contents": "getDataOnChange(${1:const std::string key})"},
		{"trigger:"	"setCollisionProtectionEnabled	ALMotionProxy	MOTION","contents": "setCollisionProtectionEnabled(${1:const std::string pChainName})"},
		{"trigger:"	"subscribe	ALSpeechRecognitionProxy	AUDIO","contents": "subscribe()"},
		{"trigger:"	"stopMove	ALRobotPosture	MOTION","contents": "stopMove()"},
		{"trigger:"	"getDarknessThreshold	ALDarknessDetectionProxy	VISION","contents": "getDarknessThreshold()"},
		{"trigger:"	"areResourcesFree	ALResourceManagerProxy	CORE","contents": "areResourcesFree()"},
		{"trigger:"	"setVolume	ALAudioPlayerProxy	AUDIO","contents": "setVolume(${1:const int taskId})"},
		{"trigger:"	"getCurrentPosition	ALAudioPlayerProxy	AUDIO","contents": "getCurrentPosition()"},
		{"trigger:"	"declare	ALBonjourProxy	CORE","contents": "declare()"},
		{"trigger:"	"setLanguageDefaultVoice	ALTextToSpeechProxy	AUDIO","contents": "setLanguageDefaultVoice(${1:const std::string language})"},
		{"trigger:"	"getEventHistory	ALMemoryProxy	CORE","contents": "getEventHistory()"},
		{"trigger:"	"getVolume	ALAudioPlayerProxy	AUDIO","contents": "getVolume()"},
		{"trigger:"	"getCameraModel	ALVideoDeviceProxy	VISION","contents": "getCameraModel()"},
		{"trigger:"	"stopAll	ALTextToSpeechProxy	AUDIO","contents": "stopAll()"},
		{"trigger:"	"getRobotPosition	ALMotionProxy	MOTION","contents": "getRobotPosition()"},
		{"trigger:"	"subscribe	ALAudioDeviceProxy	AUDIO","contents": "subscribe()"},
		{"trigger:"	"wbEnable	ALMotionProxy	MOTION","contents": "wbEnable()"},
		{"trigger:"	"insertListData	ALMemoryProxy	CORE","contents": "insertListData()"},
		{"trigger:"	"getSubscribersInfo	ALExtractor	CORE","contents": "getSubscribersInfo()"},
		{"trigger:"	"off	ALLeds	SENSORS","contents": "off()"},
		{"trigger:"	"isBehaviorPresent	ALBehaviorManagerProxy	CORE","contents": "isBehaviorPresent()"},
		{"trigger:"	"getType	ALMemoryProxy	CORE","contents": "getType()"},
		{"trigger:"	"getPosition	ALFaceTrackerProxy	TRACKERS","contents": "getPosition()"},
		{"trigger:"	"areResourcesOwnedBy	ALResourceManagerProxy	CORE","contents": "areResourcesOwnedBy(${1:const std::vector<std::string> resourceNameList})"},
		{"trigger:"	"getPostureFamilyList	ALRobotPosture	MOTION","contents": "getPostureFamilyList()"},
		{"trigger:"	"getPictureFormat	ALPhotoCaptureProxy	VISION","contents": "getPictureFormat()"},
		{"trigger:"	"getCOM	ALMotionProxy	MOTION","contents": "getCOM(${1:const std::string pName},${2:const int pSpace})"},
		{"trigger:"	"unregisterModuleReference	ALMemoryProxy	CORE","contents": "unregisterModuleReference()"},
		{"trigger:"	"set	DCMProxy	SENSORS","contents": "set()"},
		{"trigger:"	"playFileFromPosition	ALAudioPlayerProxy	AUDIO","contents": "playFileFromPosition(${1:const std::string fileName},${2:const float position},${3:const float volume})"},
		{"trigger:"	"playFileInLoop	ALAudioPlayerProxy	AUDIO","contents": "playFileInLoop(${1:const std::string fileName},${2:const float volume})"},
		{"trigger:"	"getExtractorEvent	ALMemoryProxy	CORE","contents": "getExtractorEvent()"},
		{"trigger:"	"setFrameRate	ALVideoDeviceProxy	VISION","contents": "setFrameRate(${1:const std::string Name})"},
		{"trigger:"	"wbEnableBalanceConstraint	ALMotionProxy	MOTION","contents": "wbEnableBalanceConstraint(${1:const bool isEnable})"},
		{"trigger:"	"stopTracker	ALRedBallTrackerProxy	TRACKERS","contents": "stopTracker()"},
		{"trigger:"	"getFootSteps	ALMotionProxy	MOTION","contents": "getFootSteps()"},
		{"trigger:"	"declareEvent	ALResourceManagerProxy	CORE","contents": "declareEvent(${1:const std::string eventName})"},
		{"trigger:"	"setParam	ALVisionRecognitionProxy	VISION","contents": "setParam(${1:const std::string paramName})"},
		{"trigger:"	"sayToFileAndPlay	ALTextToSpeechProxy	AUDIO","contents": "sayToFileAndPlay()"},
		{"trigger:"	"setCaptureInterval	ALPhotoCaptureProxy	VISION","contents": "setCaptureInterval()"},
		{"trigger:"	"getBodyNames	ALMotionProxy	MOTION","contents": "getBodyNames()"},
		{"trigger:"	"readPrefFile	ALPreferencesProxy	CORE","contents": "readPrefFile(${1:const std::string fileName})"},
		{"trigger:"	"getMethodHelp	ALModule	CORE","contents": "getMethodHelp()"},
		{"trigger:"	"clearDatabase	ALFaceDetectionProxy	VISION","contents": "clearDatabase()"},
		{"trigger:"	"transformInterpolation	ALMotionProxy	MOTION","contents": "transformInterpolation(${1:const std::string chainName},${2:const int space},${3:const AL::ALValue path},${4:const int axisMask},${5:const AL::ALValue duration})"},
		{"trigger:"	"takePicture	ALPhotoCaptureProxy	VISION","contents": "takePicture(${1:const std::string folderPath},${2:const std::string fileName})"},
		{"trigger:"	"setResolution	ALVisionExtractor	CORE","contents": "setResolution()"},
		{"trigger:"	"closeAudioInputs	ALAudioDeviceProxy	AUDIO","contents": "closeAudioInputs()"},
		{"trigger:"	"setVocabulary	ALSpeechRecognitionProxy	AUDIO","contents": "setVocabulary(${1:const std::vector<std::string> vocabulary})"},
		{"trigger:"	"sayToFile	ALTextToSpeechProxy	AUDIO","contents": "sayToFile(${1:const std::string stringToSay})"},
		{"trigger:"	"getLoadedFilesNames	ALAudioPlayerProxy	AUDIO","contents": "getLoadedFilesNames()"},
		{"trigger:"	"sendLocalBufferToOutput	ALAudioDeviceProxy	AUDIO","contents": "sendLocalBufferToOutput(${1:const int nbOfFrames})"},
		{"trigger:"	"releaseDirectRawImage	ALVideoDeviceProxy	VISION","contents": "releaseDirectRawImage()"},
		{"trigger:"	"getReferenceQuality	ALVisualCompassProxy	VISION","contents": "getReferenceQuality()"},
		{"trigger:"	"backlighting	ALVisionToolboxProxy	VISION","contents": "backlighting()"},
		{"trigger:"	"setColorSpace	ALVideoDeviceProxy	VISION","contents": "setColorSpace(${1:const std::string Name})"},
		{"trigger:"	"state	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "state()"},
		{"trigger:"	"getSmartStiffnessEnabled	ALMotionProxy	MOTION","contents": "getSmartStiffnessEnabled()"},
		{"trigger:"	"calibration	DCMProxy	SENSORS","contents": "calibration()"},
		{"trigger:"	"getData	ALResourceManagerProxy	CORE","contents": "getData(${1:const std::string key})"},
		{"trigger:"	"stopBehavior	ALBehaviorManagerProxy	CORE","contents": "stopBehavior()"},
		{"trigger:"	"rasta	ALLeds	SENSORS","contents": "rasta()"},
		{"trigger:"	"getMasterVolume	ALAudioPlayerProxy	AUDIO","contents": "getMasterVolume()"},
		{"trigger:"	"getPhoneticTranscription	ALSpeechRecognitionProxy	AUDIO","contents": "getPhoneticTranscription()"},
		{"trigger:"	"stopMove	ALMotionProxy	MOTION","contents": "stopMove()"},
		{"trigger:"	"getData	ALMemoryProxy	CORE","contents": "getData(${1:const std::string key})"},
		{"trigger:"	"playInLoop	ALAudioPlayerProxy	AUDIO","contents": "playInLoop(${1:const int taskId},${2:const float volume})"},
		{"trigger:"	"logInStd	ALLoggerProxy	CORE","contents": "logInStd()"},
		{"trigger:"	"sizesToResolution	ALVideoDeviceProxy	VISION","contents": "sizesToResolution(${1:const int Width})"},
		{"trigger:"	"getImageInfoFromAngularInfo	ALVideoDeviceProxy	VISION","contents": "getImageInfoFromAngularInfo(${1:const int CameraIndex})"},
		{"trigger:"	"changeAngles	ALMotionProxy	MOTION","contents": "changeAngles(${1:const AL::ALValue names},${2:const AL::ALValue changes})"},
		{"trigger:"	"getActiveCamera	ALVisionExtractor	CORE","contents": "getActiveCamera()"},
		{"trigger:"	"enableStateResource	ALResourceManagerProxy	CORE","contents": "enableStateResource(${1:const std::string resourceName})"},
		{"trigger:"	"setPanorama	ALAudioPlayerProxy	AUDIO","contents": "setPanorama()"},
		{"trigger:"	"playFile	ALAudioPlayerProxy	AUDIO","contents": "playFile(${1:const std::string fileName},${2:const float volume})"},
		{"trigger:"	"getLanguage	ALTextToSpeechProxy	AUDIO","contents": "getLanguage()"},
		{"trigger:"	"getUserBehaviorNames	ALBehaviorManagerProxy	CORE","contents": "getUserBehaviorNames()"},
		{"trigger:"	"setVoice	ALTextToSpeechProxy	AUDIO","contents": "setVoice()"},
		{"trigger:"	"getParameter	ALSpeechRecognitionProxy	AUDIO","contents": "getParameter()"},
		{"trigger:"	"getModuleHelp	ALModule	CORE","contents": "getModuleHelp()"},
		{"trigger:"	"getSensorNames	ALMotionProxy	MOTION","contents": "getSensorNames()"},
		{"trigger:"	"resolutionToSizes	ALVideoDeviceProxy	VISION","contents": "resolutionToSizes()"},
		{"trigger:"	"wbGoToBalance	ALMotionProxy	MOTION","contents": "wbGoToBalance(${1:const std::string supportLeg})"},
		{"trigger:"	"getDefaultBehaviors	ALBehaviorManagerProxy	CORE","contents": "getDefaultBehaviors()"},
		{"trigger:"	"changeTransform	ALMotionProxy	MOTION","contents": "changeTransform(${1:const std::string chainName},${2:const int space},${3:const std::vector<float> transform},${4:const float fractionMaxSpeed})"},
		{"trigger:"	"getMethodList	ALModule	CORE","contents": "getMethodList()"},
		{"trigger:"	"preloadBehavior	ALBehaviorManagerProxy	CORE","contents": "preloadBehavior()"},
		{"trigger:"	"getResolution	ALVideoRecorderProxy	VISION","contents": "getResolution()"},
		{"trigger:"	"setParameter	ALAudioDeviceProxy	AUDIO","contents": "setParameter(${1:const std::string parameter})"},
		{"trigger:"	"loadVoicePreference	ALTextToSpeechProxy	AUDIO","contents": "loadVoicePreference()"},
		{"trigger:"	"waitForLocalResourcesTree	ALResourceManagerProxy	CORE","contents": "waitForLocalResourcesTree(${1:const std::vector<std::string> resourceName},${2:const boost::shared_ptr<AL::ALHierarchyOwner> treeOwnerPtr},${3:const std::string callbackName})"},
		{"trigger:"	"moveIsActive	ALMotionProxy	MOTION","contents": "moveIsActive()"},
		{"trigger:"	"sendIpAddress	ALInfraredProxy	SENSORS","contents": "sendIpAddress()"},
		{"trigger:"	"getOutputVolume	ALAudioDeviceProxy	AUDIO","contents": "getOutputVolume()"},
		{"trigger:"	"getRearMicEnergy	ALAudioDeviceProxy	AUDIO","contents": "getRearMicEnergy()"},
		{"trigger:"	"scan	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "scan()"},
		{"trigger:"	"getRunningBehaviors	ALBehaviorManagerProxy	CORE","contents": "getRunningBehaviors()"},
		{"trigger:"	"getAvailableVoices	ALTextToSpeechProxy	AUDIO","contents": "getAvailableVoices()"},
		{"trigger:"	"setFileAsInput	ALAudioDeviceProxy	AUDIO","contents": "setFileAsInput()"},
		{"trigger:"	"getGlobalModuleList	ALLauncherProxy	CORE","contents": "getGlobalModuleList()"},
		{"trigger:"	"stopTracker	ALFaceTrackerProxy	TRACKERS","contents": "stopTracker()"},
		{"trigger:"	"takePictureRegularly	ALVisionToolboxProxy	VISION","contents": "takePictureRegularly(${1:const float secondsBetweenTwoShots},${2:const std::string pathAndNameRoot},${3:const bool overwriteImage},${4:const std::string imageRecordFormat})"},
		{"trigger:"	"closeAudioOutputs	ALAudioDeviceProxy	AUDIO","contents": "closeAudioOutputs()"},
		{"trigger:"	"startVideoRecord	ALVisionToolboxProxy	VISION","contents": "startVideoRecord()"},
		{"trigger:"	"getImageInfoFromAngularInfoWithResolution	ALVideoDeviceProxy	VISION","contents": "getImageInfoFromAngularInfoWithResolution(${1:const int CameraIndex},${2:const std::vector<float> AngularInfo})"},
		{"trigger:"	"setWhiteBalance	ALVisionToolboxProxy	VISION","contents": "setWhiteBalance()"},
		{"trigger:"	"getDataPtr	ALMemoryProxy	CORE","contents": "getDataPtr()"},
		{"trigger:"	"goToPosture	ALRobotPosture	MOTION","contents": "goToPosture(${1:const std::string postureName})"},
		{"trigger:"	"listLEDs	ALLeds	SENSORS","contents": "listLEDs()"},
		{"trigger:"	"getIntensity	ALLeds	SENSORS","contents": "getIntensity()"},
		{"trigger:"	"getAngularPositionFromImagePosition	ALVideoDeviceProxy	VISION","contents": "getAngularPositionFromImagePosition(${1:const int CameraIndex})"},
		{"trigger:"	"earLedsSetAngle	ALLeds	SENSORS","contents": "earLedsSetAngle(${1:const int degrees},${2:const float duration})"},
		{"trigger:"	"play	ALAudioPlayerProxy	AUDIO","contents": "play(${1:const int taskId},${2:const float volume})"},
		{"trigger:"	"getVideoFormat	ALVideoRecorderProxy	VISION","contents": "getVideoFormat()"},
		{"trigger:"	"walkInit	ALMotionProxy	MOTION","contents": "walkInit()"},
		{"trigger:"	"moveInit	ALMotionProxy	MOTION","contents": "moveInit()"},
		{"trigger:"	"getCurrentPrecision	ALExtractor	CORE","contents": "getCurrentPrecision()"},
		{"trigger:"	"getFrameRate	ALVisionExtractor	CORE","contents": "getFrameRate()"},
		{"trigger:"	"getFrontMicEnergy	ALAudioDeviceProxy	AUDIO","contents": "getFrontMicEnergy()"},
		{"trigger:"	"wbEnableEffectorControl	ALMotionProxy	MOTION","contents": "wbEnableEffectorControl(${1:const std::string effectorName})"},
		{"trigger:"	"getImgInfoFromAngInfo	ALVideoDeviceProxy	VISION","contents": "getImgInfoFromAngInfo()"},
		{"trigger:"	"unSubscribeRemoteModule	ALAudioDeviceProxy	AUDIO","contents": "unSubscribeRemoteModule()"},
		{"trigger:"	"reLearnFace	ALFaceDetectionProxy	VISION","contents": "reLearnFace()"},
		{"trigger:"	"positionInterpolations	ALMotionProxy	MOTION","contents": "positionInterpolations(${1:const std::vector<std::string> effectorNames},${2:const int taskSpaceForAllPaths},${3:const AL::ALValue paths},${4:const AL::ALValue axisMasks},${5:const AL::ALValue relativeTimes})"},
		{"trigger:"	"launchExecutable	ALLauncherProxy	CORE","contents": "launchExecutable()"},
		{"trigger:"	"setStiffnesses	ALMotionProxy	MOTION","contents": "setStiffnesses(${1:const AL::ALValue names})"},
		{"trigger:"	"getVoice	ALTextToSpeechProxy	AUDIO","contents": "getVoice()"},
		{"trigger:"	"getResolutions	ALVideoDeviceProxy	VISION","contents": "getResolutions()"},
		{"trigger:"	"isRecording	ALVideoRecorderProxy	VISION","contents": "isRecording()"},
		{"trigger:"	"setAlias	DCMProxy	SENSORS","contents": "setAlias()"},
		{"trigger:"	"getActiveCamera	ALVideoDeviceProxy	VISION","contents": "getActiveCamera()"},
		{"trigger:"	"moveTo	ALMotionProxy	MOTION","contents": "moveTo(${1:const AL::ALValue controlPoints})"},
		{"trigger:"	"laserON	ALLaserProxy	SENSORS","contents": "laserON()"},
		{"trigger:"	"getFrameRate	ALVideoDeviceProxy	VISION","contents": "getFrameRate()"},
		{"trigger:"	"stopMicrophonesRecording	ALAudioRecorderProxy	AUDIO","contents": "stopMicrophonesRecording()"},
		{"trigger:"	"killWalk	ALMotionProxy	MOTION","contents": "killWalk()"},
		{"trigger:"	"setTransform	ALMotionProxy	MOTION","contents": "setTransform(${1:const std::string chainName},${2:const int space},${3:const std::vector<float> transform},${4:const float fractionMaxSpeed})"},
		{"trigger:"	"pause	ALAudioPlayerProxy	AUDIO","contents": "pause()"},
		{"trigger:"	"lowInfo	ALLoggerProxy	CORE","contents": "lowInfo(${1:const std::string moduleName})"},
		{"trigger:"	"setOpeningAngle	ALLaserProxy	SENSORS","contents": "setOpeningAngle(${1:const float angle_min_f})"},
		{"trigger:"	"recordVideo	ALVideoDeviceProxy	VISION","contents": "recordVideo(${1:const std::string Name},${2:const std::string Path},${3:const int TotalNumber})"},
		{"trigger:"	"setFootStepsWithSpeed	ALMotionProxy	MOTION","contents": "setFootStepsWithSpeed(${1:const std::vector<std::string> legName},${2:const AL::ALValue footSteps},${3:const std::vector<float> fractionMaxSpeed})"}
	]
}
