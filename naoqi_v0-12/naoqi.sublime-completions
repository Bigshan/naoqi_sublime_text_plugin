{
	"scope": "source.python",

	"completions":
	[
		{"trigger":	"getGlobalModuleList	ALLauncherProxy	CORE","contents": "getGlobalModuleList()"},
		{"trigger":	"getCOM	ALMotionProxy	MOTION","contents": "getCOM(${1:const std::string pName},${2:const int pSpace},${3:const bool pUseSensorValues})"},
		{"trigger":	"logInForwarder	ALLoggerProxy	CORE","contents": "logInForwarder(${1:const std::string inputAddress})"},
		{"trigger":	"technologies	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "technologies()"},
		{"trigger":	"createResource	ALResourceManagerProxy	CORE","contents": "createResource(${1:const std::string resourceName},${2:const std::string parentResourceName})"},
		{"trigger":	"setResolution	ALVideoDeviceProxy	VISION","contents": "setResolution(${1:const std::string Name},${2:const int Resolution})"},
		{"trigger":	"getVolume	ALTextToSpeechProxy	AUDIO","contents": "getVolume()"},
		{"trigger":	"stopAll	ALAudioPlayerProxy	AUDIO","contents": "stopAll()"},
		{"trigger":	"scan	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "scan(${1:const std::string technology})"},
		{"trigger":	"takePicture	ALPhotoCaptureProxy	VISION","contents": "takePicture(${1:const std::string folderPath},${2:const std::string fileName},${3:const bool overwrite})"},
		{"trigger":	"listGroups	ALLeds	SENSORS","contents": "listGroups()"},
		{"trigger":	"walkTo	ALMotionProxy	MOTION","contents": "walkTo(${1:const float x},${2:const float y},${3:const float theta},${4:const AL::ALValue feetGaitConfig})"},
		{"trigger":	"insertData	ALMemoryProxy	CORE","contents": "insertData(${1:const std::string key},${2:const int value})"},
		{"trigger":	"setActiveCamera	ALVideoDeviceProxy	VISION","contents": "setActiveCamera(${1:const std::string Name},${2:const int ActiveCamera})"},
		{"trigger":	"getMethodList	ALModule	CORE","contents": "getMethodList()"},
		{"trigger":	"getInstalledBehaviors	ALBehaviorManagerProxy	CORE","contents": "getInstalledBehaviors()"},
		{"trigger":	"waitForLocalResources	ALResourceManagerProxy	CORE","contents": "waitForLocalResources(${1:const std::vector<std::string> resourceNameList},${2:const boost::shared_ptr<AL::ALOwner> owner},${3:const std::string callbackName},${4:const int timeoutSeconds})"},
		{"trigger":	"getImgInfoFromAngInfoWithRes	ALVideoDeviceProxy	VISION","contents": "getImgInfoFromAngInfoWithRes(${1:const std::vector<float> angInfo},${2:const int resIndex})"},
		{"trigger":	"tetheringPassphrase	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "tetheringPassphrase(${1:const std::string technology})"},
		{"trigger":	"setFrameRate	ALVisionExtractor	CORE","contents": "setFrameRate(${1:const std::string pSubscribedName},${2:const int framerate})"},
		{"trigger":	"getParameter	ALTextToSpeechProxy	AUDIO","contents": "getParameter(${1:const std::string parameter})"},
		{"trigger":	"playInLoop	ALAudioPlayerProxy	AUDIO","contents": "playInLoop(${1:const int taskId})"},
		{"trigger":	"launchLocal	ALLauncherProxy	CORE","contents": "launchLocal(${1:const std::string moduleName})"},
		{"trigger":	"scan	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "scan()"},
		{"trigger":	"stopTracker	ALRedBallTrackerProxy	TRACKERS","contents": "stopTracker()"},
		{"trigger":	"setWalkArmsEnabled	ALMotionProxy	MOTION","contents": "setWalkArmsEnabled(${1:const bool leftArmEnable},${2:const bool rightArmEnable})"},
		{"trigger":	"stopMove	ALRobotPosture	MOTION","contents": "stopMove()"},
		{"trigger":	"getImageSizeFromAngularSize	ALVideoDeviceProxy	VISION","contents": "getImageSizeFromAngularSize(${1:const int CameraIndex},${2:const std::vector<float> AngularSize})"},
		{"trigger":	"getEventHistory	ALMemoryProxy	CORE","contents": "getEventHistory(${1:const std::string pName})"},
		{"trigger":	"enableTethering	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "enableTethering(${1:const std::string technology})"},
		{"trigger":	"setColorSpace	ALPhotoCaptureProxy	VISION","contents": "setColorSpace(${1:const int colorSpace})"},
		{"trigger":	"startVideoRecord	ALVisionToolboxProxy	VISION","contents": "startVideoRecord(${1:const std::string videoName})"},
		{"trigger":	"setVerbosity	ALLoggerProxy	CORE","contents": "setVerbosity(${1:const std::string verbosity})"},
		{"trigger":	"getMyPrecision	ALSensorsProxy	SENSORS","contents": "getMyPrecision(${1:const std::string name})"},
		{"trigger":	"move	ALMotionProxy	MOTION","contents": "move(${1:const float x},${2:const float y},${3:const float theta})"},
		{"trigger":	"stopMove	ALMotionProxy	MOTION","contents": "stopMove()"},
		{"trigger":	"fadeListRGB	ALLeds	SENSORS","contents": "fadeListRGB(${1:const std::string name},${2:const AL::ALValue rgbList},${3:const AL::ALValue timeList})"},
		{"trigger":	"setFallManagerEnabled	ALMotionProxy	MOTION","contents": "setFallManagerEnabled(${1:const bool enable})"},
		{"trigger":	"setFootStepsWithSpeed	ALMotionProxy	MOTION","contents": "setFootStepsWithSpeed(${1:const std::vector<std::string> legName},${2:const AL::ALValue footSteps},${3:const std::vector<float> fractionMaxSpeed},${4:const bool clearExisting})"},
		{"trigger":	"setOpeningAngle	ALLaserProxy	SENSORS","contents": "setOpeningAngle(${1:const float angle_min_f},${2:const float angle_max_f})"},
		{"trigger":	"playFileFromPosition	ALAudioPlayerProxy	AUDIO","contents": "playFileFromPosition(${1:const std::string fileName},${2:const float position})"},
		{"trigger":	"insertListData	ALMemoryProxy	CORE","contents": "insertListData(${1:const AL::ALValue list})"},
		{"trigger":	"createAlias	DCMProxy	SENSORS","contents": "createAlias(${1:const AL::ALValue alias})"},
		{"trigger":	"moveTo	ALNavigationProxy	MOTION","contents": "moveTo(${1:const float x},${2:const float y},${3:const float theta},${4:const AL::ALValue moveConfig})"},
		{"trigger":	"setPosition	ALMotionProxy	MOTION","contents": "setPosition(${1:const std::string chainName},${2:const int space},${3:const std::vector<float> position},${4:const float fractionMaxSpeed},${5:const int axisMask})"},
		{"trigger":	"installBehavior	ALBehaviorManagerProxy	CORE","contents": "installBehavior(${1:const std::string absolutePath},${2:const std::string localPath},${3:const bool overwrite})"},
		{"trigger":	"setParameter	ALVisionExtractor	CORE","contents": "setParameter(${1:const std::string paramName},${2:const AL::ALValue paramValue})"},
		{"trigger":	"getCurrentPeriod	ALSensorsProxy	SENSORS","contents": "getCurrentPeriod()"},
		{"trigger":	"getCurrentPosition	ALAudioPlayerProxy	AUDIO","contents": "getCurrentPosition(${1:const int taskId})"},
		{"trigger":	"getCameraModelID	ALVideoDeviceProxy	VISION","contents": "getCameraModelID()"},
		{"trigger":	"loadVocabulary	ALSpeechRecognitionProxy	AUDIO","contents": "loadVocabulary(${1:const std::string vocabulary})"},
		{"trigger":	"logInSys	ALLoggerProxy	CORE","contents": "logInSys()"},
		{"trigger":	"services	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "services()"},
		{"trigger":	"setAudioExpression	ALSpeechRecognitionProxy	AUDIO","contents": "setAudioExpression(${1:const bool setOrNot})"},
		{"trigger":	"getFootSteps	ALMotionProxy	MOTION","contents": "getFootSteps()"},
		{"trigger":	"playInLoop	ALAudioPlayerProxy	AUDIO","contents": "playInLoop(${1:const int taskId},${2:const float volume},${3:const float pan})"},
		{"trigger":	"createGroup	ALLeds	SENSORS","contents": "createGroup(${1:const std::string groupName},${2:const std::vector<std::string> ledNames})"},
		{"trigger":	"releaseResources	ALResourceManagerProxy	CORE","contents": "releaseResources(${1:const std::vector<std::string> resourceNames},${2:const std::string ownerName})"},
		{"trigger":	"wbFootState	ALMotionProxy	MOTION","contents": "wbFootState(${1:const std::string stateName},${2:const std::string supportLeg})"},
		{"trigger":	"getAvailableLanguages	ALSpeechRecognitionProxy	AUDIO","contents": "getAvailableLanguages()"},
		{"trigger":	"unsubscribe	ALAudioSourceLocalizationProxy	AUDIO","contents": "unsubscribe(${1:const std::string name})"},
		{"trigger":	"moveTo	ALMotionProxy	MOTION","contents": "moveTo(${1:const float x},${2:const float y},${3:const float theta})"},
		{"trigger":	"setSimCamInputSize	ALVideoDeviceProxy	VISION","contents": "setSimCamInputSize(${1:const int Width},${2:const int Height})"},
		{"trigger":	"isNewData	ALRedBallTrackerProxy	TRACKERS","contents": "isNewData()"},
		{"trigger":	"removeMicroEvent	ALMemoryProxy	CORE","contents": "removeMicroEvent(${1:const std::string name})"},
		{"trigger":	"play	ALAudioPlayerProxy	AUDIO","contents": "play(${1:const int taskId})"},
		{"trigger":	"waitForLocalResource	ALResourceManagerProxy	CORE","contents": "waitForLocalResource(${1:const std::string resourceName},${2:const boost::shared_ptr<AL::ALOwner> ownerPtr},${3:const std::string callbackName},${4:const int timeoutSeconds})"},
		{"trigger":	"killMove	ALMotionProxy	MOTION","contents": "killMove()"},
		{"trigger":	"closeAudioInputs	ALAudioDeviceProxy	AUDIO","contents": "closeAudioInputs()"},
		{"trigger":	"subscribeToEvent	ALMemoryProxy	CORE","contents": "subscribeToEvent(${1:const std::string name},${2:const std::string callbackModule},${3:const std::string callbackMethod})"},
		{"trigger":	"getModuleHelp	ALModule	CORE","contents": "getModuleHelp()"},
		{"trigger":	"getDarknessThreshold	ALDarknessDetectionProxy	VISION","contents": "getDarknessThreshold()"},
		{"trigger":	"startTracker	ALRedBallTrackerProxy	TRACKERS","contents": "startTracker()"},
		{"trigger":	"disableEnergyComputation	ALAudioDeviceProxy	AUDIO","contents": "disableEnergyComputation()"},
		{"trigger":	"rotateEyes	ALLeds	SENSORS","contents": "rotateEyes(${1:const int rgb},${2:const float timeForRotation},${3:const float totalDuration})"},
		{"trigger":	"getMasterVolume	ALAudioPlayerProxy	AUDIO","contents": "getMasterVolume()"},
		{"trigger":	"setResolution	ALVisionExtractor	CORE","contents": "setResolution(${1:const int resolution})"},
		{"trigger":	"getVolume	ALAudioPlayerProxy	AUDIO","contents": "getVolume(${1:const int taskId})"},
		{"trigger":	"setColorSpace	ALVideoRecorderProxy	VISION","contents": "setColorSpace(${1:const int colorSpace})"},
		{"trigger":	"wbEnableBalanceConstraint	ALMotionProxy	MOTION","contents": "wbEnableBalanceConstraint(${1:const bool isEnable},${2:const std::string supportLeg})"},
		{"trigger":	"closeHand	ALMotionProxy	MOTION","contents": "closeHand(${1:const std::string handName})"},
		{"trigger":	"getData	ALResourceManagerProxy	CORE","contents": "getData(${1:const std::string key})"},
		{"trigger":	"setParameter	ALSoundDetection	AUDIO","contents": "setParameter(${1:const std::string type},${2:const std::string parameter},${3:const float value})"},
		{"trigger":	"startPeriodicRecording	ALMotionRecorder	MOTION","contents": "startPeriodicRecording(${1:const std::vector<std::string> jointsToRecord},${2:const int nbPoses},${3:const bool extensionAllowed},${4:const float timeStep},${5:const std::vector<std::string> jointsToReplay},${6:const AL::ALValue replayData})"},
		{"trigger":	"getLoadedFilesNames	ALAudioPlayerProxy	AUDIO","contents": "getLoadedFilesNames()"},
		{"trigger":	"getVoice	ALTextToSpeechProxy	AUDIO","contents": "getVoice()"},
		{"trigger":	"changeAngles	ALMotionProxy	MOTION","contents": "changeAngles(${1:const AL::ALValue names},${2:const AL::ALValue changes},${3:const float fractionMaxSpeed})"},
		{"trigger":	"getDataList	ALResourceManagerProxy	CORE","contents": "getDataList(${1:const std::string filter})"},
		{"trigger":	"getLeftMicEnergy	ALAudioDeviceProxy	AUDIO","contents": "getLeftMicEnergy()"},
		{"trigger":	"stopFrameGrabber	ALVideoDeviceProxy	VISION","contents": "stopFrameGrabber()"},
		{"trigger":	"setAlias	DCMProxy	SENSORS","contents": "setAlias(${1:const AL::ALValue commands})"},
		{"trigger":	"getCameraParameter	ALVideoDeviceProxy	VISION","contents": "getCameraParameter(${1:const std::string Name},${2:const int Id})"},
		{"trigger":	"moveTo	ALNavigationProxy	MOTION","contents": "moveTo(${1:const float x},${2:const float y},${3:const float theta})"},
		{"trigger":	"isBehaviorRunning	ALBehaviorManagerProxy	CORE","contents": "isBehaviorRunning(${1:const std::string name})"},
		{"trigger":	"updatePeriod	ALExtractor	CORE","contents": "updatePeriod(${1:const std::string pSubscribedName},${2:const int pPeriod})"},
		{"trigger":	"startInteractiveRecording	ALMotionRecorder	MOTION","contents": "startInteractiveRecording(${1:const std::vector<std::string> jointsToRecord},${2:const int nbPoses},${3:const bool extensionAllowed},${4:const int mode})"},
		{"trigger":	"getSmartStiffnessEnabled	ALMotionProxy	MOTION","contents": "getSmartStiffnessEnabled(${1:const bool enable})"},
		{"trigger":	"startRecording	ALVideoRecorderProxy	VISION","contents": "startRecording(${1:const std::string folderPath},${2:const std::string fileName},${3:const bool overwrite})"},
		{"trigger":	"updateTrackerTarget	ALMotionProxy	MOTION","contents": "updateTrackerTarget(${1:const float pTargetPositionWy},${2:const float pTargetPositionWz},${3:const int pTimeSinceDetectionMs},${4:const bool pUseOfWholeBody})"},
		{"trigger":	"installBehavior	ALBehaviorManagerProxy	CORE","contents": "installBehavior(${1:const std::string localPath})"},
		{"trigger":	"setWholeBodyOn	ALRedBallTrackerProxy	TRACKERS","contents": "setWholeBodyOn(${1:const bool wholeBodyOn})"},
		{"trigger":	"getPosition	ALMotionProxy	MOTION","contents": "getPosition(${1:const std::string name},${2:const int space},${3:const bool useSensorValues})"},
		{"trigger":	"wbSetEffectorControl	ALMotionProxy	MOTION","contents": "wbSetEffectorControl(${1:const std::string effectorName},${2:const AL::ALValue targetCoordinate})"},
		{"trigger":	"getWalkArmsEnabled	ALMotionProxy	MOTION","contents": "getWalkArmsEnabled()"},
		{"trigger":	"getFileLength	ALAudioPlayerProxy	AUDIO","contents": "getFileLength(${1:const int taskId})"},
		{"trigger":	"getActiveCamera	ALVisionExtractor	CORE","contents": "getActiveCamera()"},
		{"trigger":	"areResourcesFree	ALResourceManagerProxy	CORE","contents": "areResourcesFree(${1:const std::vector<std::string> resourceNames})"},
		{"trigger":	"getUsage	ALModule	CORE","contents": "getUsage(${1:const std::string methodName})"},
		{"trigger":	"startFrameGrabber	ALVideoDeviceProxy	VISION","contents": "startFrameGrabber(${1:const int CameraIndex})"},
		{"trigger":	"logInFile	ALLoggerProxy	CORE","contents": "logInFile(${1:const std::string fileName})"},
		{"trigger":	"getParameter	ALSpeechRecognitionProxy	AUDIO","contents": "getParameter(${1:const std::string parameter})"},
		{"trigger":	"isCollision	ALMotionProxy	MOTION","contents": "isCollision(${1:const std::string pChainName})"},
		{"trigger":	"moveTo	ALMotionProxy	MOTION","contents": "moveTo(${1:const float x},${2:const float y},${3:const float theta},${4:const AL::ALValue moveConfig})"},
		{"trigger":	"loadVoicePreference	ALTextToSpeechProxy	AUDIO","contents": "loadVoicePreference(${1:const std::string preferencesFileSuffix})"},
		{"trigger":	"getActualPoseAndTime	ALRobotPoseProxy	SENSORS","contents": "getActualPoseAndTime()"},
		{"trigger":	"isRunning	ALModule	CORE","contents": "isRunning(${1:const int id})"},
		{"trigger":	"getSensitivity	ALMovementDetectionProxy	VISION","contents": "getSensitivity(${1:const float sensitivity})"},
		{"trigger":	"isActive	ALFaceTrackerProxy	TRACKERS","contents": "isActive()"},
		{"trigger":	"getCurrentPrecision	ALExtractor	CORE","contents": "getCurrentPrecision()"},
		{"trigger":	"moveIsActive	ALMotionProxy	MOTION","contents": "moveIsActive()"},
		{"trigger":	"setVolume	ALTextToSpeechProxy	AUDIO","contents": "setVolume(${1:const float volume})"},
		{"trigger":	"angleInterpolationWithSpeed	ALMotionProxy	MOTION","contents": "angleInterpolationWithSpeed(${1:const AL::ALValue names},${2:const AL::ALValue targetAngles},${3:const float maxSpeedFraction})"},
		{"trigger":	"setActiveCamera	ALVisionExtractor	CORE","contents": "setActiveCamera(${1:const int cameraId})"},
		{"trigger":	"launchScript	ALLauncherProxy	CORE","contents": "launchScript(${1:const std::string scriptPath})"},
		{"trigger":	"service	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "service(${1:const std::string serviceId})"},
		{"trigger":	"getParam	ALVideoDeviceProxy	VISION","contents": "getParam(${1:const int Param})"},
		{"trigger":	"declareEvent	ALMemoryProxy	CORE","contents": "declareEvent(${1:const std::string eventName},${2:const std::string extractorName})"},
		{"trigger":	"declareEvent	ALMemoryProxy	CORE","contents": "declareEvent(${1:const std::string eventName})"},
		{"trigger":	"isBehaviorInstalled	ALBehaviorManagerProxy	CORE","contents": "isBehaviorInstalled(${1:const std::string name})"},
		{"trigger":	"stop	ALModule	CORE","contents": "stop(${1:const int id})"},
		{"trigger":	"subscribe	ALExtractor	CORE","contents": "subscribe(${1:const std::string pSubscribedName},${2:const int pPeriod},${3:const float pPrecision})"},
		{"trigger":	"killAll	ALMotionProxy	MOTION","contents": "killAll()"},
		{"trigger":	"info	ALLoggerProxy	CORE","contents": "info(${1:const std::string moduleName},${2:const std::string message})"},
		{"trigger":	"getData	ALMemoryProxy	CORE","contents": "getData(${1:const std::string key},${2:const int deprecatedParameter})"},
		{"trigger":	"raiseEvent	ALMemoryProxy	CORE","contents": "raiseEvent(${1:const std::string name},${2:const AL::ALValue value})"},
		{"trigger":	"getCamerasParameter	ALVideoDeviceProxy	VISION","contents": "getCamerasParameter(${1:const std::string Name},${2:const int Id})"},
		{"trigger":	"getActiveCamera	ALVideoDeviceProxy	VISION","contents": "getActiveCamera(${1:const std::string Name})"},
		{"trigger":	"unsubscribe	ALExtractor	CORE","contents": "unsubscribe(${1:const std::string pSubscribedName})"},
		{"trigger":	"unloadAllFiles	ALAudioPlayerProxy	AUDIO","contents": "unloadAllFiles()"},
		{"trigger":	"version	ALModule	CORE","contents": "version()"},
		{"trigger":	"getFrameRate	ALVisionExtractor	CORE","contents": "getFrameRate()"},
		{"trigger":	"subscribe	ALAudioDeviceProxy	AUDIO","contents": "subscribe(${1:const std::string module})"},
		{"trigger":	"getDataPtr	ALMemoryProxy	CORE","contents": "getDataPtr(${1:const std::string key})"},
		{"trigger":	"getPostureList	ALRobotPosture	MOTION","contents": "getPostureList()"},
		{"trigger":	"updatePrecision	ALExtractor	CORE","contents": "updatePrecision(${1:const std::string pSubscribedName},${2:const float pPrecision})"},
		{"trigger":	"logInStd	ALLoggerProxy	CORE","contents": "logInStd()"},
		{"trigger":	"getMyPeriod	ALExtractor	CORE","contents": "getMyPeriod(${1:const std::string pSubscribedName})"},
		{"trigger":	"takePictureRegularly	ALVisionToolboxProxy	VISION","contents": "takePictureRegularly(${1:const float secondsBetweenTwoShots},${2:const std::string pathAndNameRoot},${3:const bool overwriteImage},${4:const std::string imageRecordFormat},${5:const int resolution})"},
		{"trigger":	"getFrameRate	ALVideoDeviceProxy	VISION","contents": "getFrameRate(${1:const std::string Name})"},
		{"trigger":	"listLEDs	ALLeds	SENSORS","contents": "listLEDs()"},
		{"trigger":	"getImgSizeFromAngSize	ALVideoDeviceProxy	VISION","contents": "getImgSizeFromAngSize(${1:const std::vector<float> angSize})"},
		{"trigger":	"sendIpAddress	ALInfraredProxy	SENSORS","contents": "sendIpAddress(${1:const std::string IP})"},
		{"trigger":	"setVolume	ALAudioPlayerProxy	AUDIO","contents": "setVolume(${1:const int taskId},${2:const float volume})"},
		{"trigger":	"declareEvent	ALResourceManagerProxy	CORE","contents": "declareEvent(${1:const std::string eventName},${2:const std::string extractorName})"},
		{"trigger":	"setFileAsInput	ALAudioDeviceProxy	AUDIO","contents": "setFileAsInput(${1:const std::string fileName})"},
		{"trigger":	"getLimits	ALMotionProxy	MOTION","contents": "getLimits(${1:const std::string name})"},
		{"trigger":	"setResolution	ALVideoRecorderProxy	VISION","contents": "setResolution(${1:const int resolution})"},
		{"trigger":	"listGroup	ALLeds	SENSORS","contents": "listGroup(${1:const std::string groupName})"},
		{"trigger":	"recordVideo	ALVideoDeviceProxy	VISION","contents": "recordVideo(${1:const std::string Name},${2:const std::string Path},${3:const int TotalNumber},${4:const int Period})"},
		{"trigger":	"earLedsSetAngle	ALLeds	SENSORS","contents": "earLedsSetAngle(${1:const int degrees},${2:const float duration},${3:const bool leaveOnAtEnd})"},
		{"trigger":	"unloadFile	ALAudioPlayerProxy	AUDIO","contents": "unloadFile(${1:const int taskId})"},
		{"trigger":	"setWholeBodyOn	ALFaceTrackerProxy	TRACKERS","contents": "setWholeBodyOn(${1:const bool pWholeBodyOn})"},
		{"trigger":	"laserON	ALLaserProxy	SENSORS","contents": "laserON()"},
		{"trigger":	"getTetheringEnable	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "getTetheringEnable(${1:const std::string technology})"},
		{"trigger":	"setParam	ALVisionRecognitionProxy	VISION","contents": "setParam(${1:const std::string paramName},${2:const AL::ALValue paramValue})"},
		{"trigger":	"wbEnableEffectorOptimization	ALMotionProxy	MOTION","contents": "wbEnableEffectorOptimization(${1:const std::string effectorName},${2:const bool isEnabled})"},
		{"trigger":	"subscribeCameras	ALVideoDeviceProxy	VISION","contents": "subscribeCameras(${1:const std::string Name},${2:const AL::ALValue CameraIndexes},${3:const AL::ALValue Resolutions},${4:const AL::ALValue ColorSpaces},${5:const int Fps})"},
		{"trigger":	"reLearnFace	ALFaceDetectionProxy	VISION","contents": "reLearnFace(${1:const std::string name})"},
		{"trigger":	"special	DCMProxy	SENSORS","contents": "special(${1:const std::string result})"},
		{"trigger":	"setMaxTryNumber	ALRobotPosture	MOTION","contents": "setMaxTryNumber(${1:const int maxTryNumber})"},
		{"trigger":	"setWordListAsVocabulary	ALSpeechRecognitionProxy	AUDIO","contents": "setWordListAsVocabulary(${1:const std::vector<std::string> vocabulary})"},
		{"trigger":	"enableRecognition	ALFaceDetectionProxy	VISION","contents": "enableRecognition(${1:const bool enable})"},
		{"trigger":	"getBrokerName	ALModule	CORE","contents": "getBrokerName()"},
		{"trigger":	"changePosition	ALMotionProxy	MOTION","contents": "changePosition(${1:const std::string effectorName},${2:const int space},${3:const std::vector<float> positionChange},${4:const float fractionMaxSpeed},${5:const int axisMask})"},
		{"trigger":	"runBehavior	ALBehaviorManagerProxy	CORE","contents": "runBehavior(${1:const std::string name})"},
		{"trigger":	"getImagesLocal	ALVideoDeviceProxy	VISION","contents": "getImagesLocal(${1:const std::string Name})"},
		{"trigger":	"unsubscribeAllInstances	ALVideoDeviceProxy	VISION","contents": "unsubscribeAllInstances(${1:const std::string Name})"},
		{"trigger":	"flushAudioOutputs	ALAudioDeviceProxy	AUDIO","contents": "flushAudioOutputs()"},
		{"trigger":	"setSecurityDistance	ALNavigationProxy	MOTION","contents": "setSecurityDistance(${1:const float distance})"},
		{"trigger":	"setVoice	ALTextToSpeechProxy	AUDIO","contents": "setVoice(${1:const std::string voiceID})"},
		{"trigger":	"setCollisionProtectionEnabled	ALMotionProxy	MOTION","contents": "setCollisionProtectionEnabled(${1:const std::string pChainName},${2:const bool pEnable})"},
		{"trigger":	"getImageRemote	ALVideoDeviceProxy	VISION","contents": "getImageRemote(${1:const std::string Name})"},
		{"trigger":	"connect	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "connect(${1:const std::string serviceId})"},
		{"trigger":	"launchPythonModule	ALLauncherProxy	CORE","contents": "launchPythonModule(${1:const std::string pythonModule})"},
		{"trigger":	"getLanguage	ALSpeechRecognitionProxy	AUDIO","contents": "getLanguage()"},
		{"trigger":	"stiffnessInterpolation	ALMotionProxy	MOTION","contents": "stiffnessInterpolation(${1:const AL::ALValue names},${2:const AL::ALValue stiffnessLists},${3:const AL::ALValue timeLists})"},
		{"trigger":	"getImageInfoFromAngularInfo	ALVideoDeviceProxy	VISION","contents": "getImageInfoFromAngularInfo(${1:const int CameraIndex},${2:const std::vector<float> AngularInfo})"},
		{"trigger":	"getImagePositionFromAngularPosition	ALVideoDeviceProxy	VISION","contents": "getImagePositionFromAngularPosition(${1:const int CameraIndex},${2:const std::vector<float> AngularPosition})"},
		{"trigger":	"stopTracker	ALFaceTrackerProxy	TRACKERS","contents": "stopTracker()"},
		{"trigger":	"getTransform	ALMotionProxy	MOTION","contents": "getTransform(${1:const std::string name},${2:const int space},${3:const bool useSensorValues})"},
		{"trigger":	"releaseDirectRawImage	ALVideoDeviceProxy	VISION","contents": "releaseDirectRawImage(${1:const std::string Name})"},
		{"trigger":	"isItDark	ALVisionToolboxProxy	VISION","contents": "isItDark()"},
		{"trigger":	"subscribeToMicroEvent	ALMemoryProxy	CORE","contents": "subscribeToMicroEvent(${1:const std::string name},${2:const std::string callbackModule},${3:const std::string callbackMessage},${4:const std::string callbackMethod})"},
		{"trigger":	"getImgPosFromAngPos	ALVideoDeviceProxy	VISION","contents": "getImgPosFromAngPos(${1:const std::vector<float> angPos})"},
		{"trigger":	"getDescription	ALSoundDetection	AUDIO","contents": "getDescription(${1:const std::string type},${2:const std::string nameDesc})"},
		{"trigger":	"getResolution	ALVisionExtractor	CORE","contents": "getResolution()"},
		{"trigger":	"openAudioOutputs	ALAudioDeviceProxy	AUDIO","contents": "openAudioOutputs()"},
		{"trigger":	"send32	ALInfraredProxy	SENSORS","contents": "send32(${1:const int Octet1},${2:const int Octet2},${3:const int Octet3},${4:const int Octet4})"},
		{"trigger":	"setTransform	ALMotionProxy	MOTION","contents": "setTransform(${1:const std::string chainName},${2:const int space},${3:const std::vector<float> transform},${4:const float fractionMaxSpeed},${5:const int axisMask})"},
		{"trigger":	"getPoseNames	ALRobotPoseProxy	SENSORS","contents": "getPoseNames()"},
		{"trigger":	"walkInit	ALMotionProxy	MOTION","contents": "walkInit()"},
		{"trigger":	"getDataOnChange	ALMemoryProxy	CORE","contents": "getDataOnChange(${1:const std::string key},${2:const int deprecatedParameter})"},
		{"trigger":	"killWalk	ALMotionProxy	MOTION","contents": "killWalk()"},
		{"trigger":	"getGVMFrameRate	ALVideoDeviceProxy	VISION","contents": "getGVMFrameRate(${1:const std::string id})"},
		{"trigger":	"setParameter	ALTextToSpeechProxy	AUDIO","contents": "setParameter(${1:const std::string parameter},${2:const float value})"},
		{"trigger":	"getColorSpace	ALVideoDeviceProxy	VISION","contents": "getColorSpace(${1:const int CameraIndex})"},
		{"trigger":	"getCaptureInterval	ALPhotoCaptureProxy	VISION","contents": "getCaptureInterval()"},
		{"trigger":	"moveToward	ALMotionProxy	MOTION","contents": "moveToward(${1:const float x},${2:const float y},${3:const float theta})"},
		{"trigger":	"getAngularSizeFromImageSize	ALVideoDeviceProxy	VISION","contents": "getAngularSizeFromImageSize(${1:const int CameraIndex},${2:const std::vector<float> ImageSize})"},
		{"trigger":	"unsubscribe	ALSpeechRecognitionProxy	AUDIO","contents": "unsubscribe(${1:const std::string name})"},
		{"trigger":	"getVideoFormat	ALVideoRecorderProxy	VISION","contents": "getVideoFormat()"},
		{"trigger":	"getOutputNames	ALSensorsProxy	SENSORS","contents": "getOutputNames()"},
		{"trigger":	"getMethodHelp	ALModule	CORE","contents": "getMethodHelp(${1:const std::string methodName})"},
		{"trigger":	"startVideoRecord_adv	ALVisionToolboxProxy	VISION","contents": "startVideoRecord_adv(${1:const std::string videoName},${2:const float framerate},${3:const std::string format},${4:const int resIndex},${5:const int numFrames})"},
		{"trigger":	"getMotionCycleTime	ALMotionProxy	MOTION","contents": "getMotionCycleTime()"},
		{"trigger":	"applyPosture	ALRobotPosture	MOTION","contents": "applyPosture(${1:const std::string postureName},${2:const float speed})"},
		{"trigger":	"fadeRGB	ALLeds	SENSORS","contents": "fadeRGB(${1:const std::string name},${2:const int rgb},${3:const float duration})"},
		{"trigger":	"stopVideoRecord	ALVisionToolboxProxy	VISION","contents": "stopVideoRecord()"},
		{"trigger":	"getImgInfoFromAngInfo	ALVideoDeviceProxy	VISION","contents": "getImgInfoFromAngInfo(${1:const std::vector<float> angles})"},
		{"trigger":	"set	DCMProxy	SENSORS","contents": "set(${1:const AL::ALValue commands})"},
		{"trigger":	"releaseImages	ALVideoDeviceProxy	VISION","contents": "releaseImages(${1:const std::string Name})"},
		{"trigger":	"play	ALAudioPlayerProxy	AUDIO","contents": "play(${1:const int taskId},${2:const float volume},${3:const float pan})"},
		{"trigger":	"backlighting	ALVisionToolboxProxy	VISION","contents": "backlighting()"},
		{"trigger":	"getResolution	ALPhotoCaptureProxy	VISION","contents": "getResolution()"},
		{"trigger":	"saveToMemory	ALPreferencesProxy	CORE","contents": "saveToMemory(${1:const AL::ALValue prefs})"},
		{"trigger":	"positionInterpolation	ALMotionProxy	MOTION","contents": "positionInterpolation(${1:const std::string chainName},${2:const int space},${3:const AL::ALValue path},${4:const int axisMask},${5:const AL::ALValue durations},${6:const bool isAbsolute})"},
		{"trigger":	"getPhoneticTranscription	ALSpeechRecognitionProxy	AUDIO","contents": "getPhoneticTranscription(${1:const std::string word})"},
		{"trigger":	"exit	ALModule	CORE","contents": "exit()"},
		{"trigger":	"playFileInLoop	ALAudioPlayerProxy	AUDIO","contents": "playFileInLoop(${1:const std::string fileName},${2:const float volume},${3:const float pan})"},
		{"trigger":	"getColorSpace	ALPhotoCaptureProxy	VISION","contents": "getColorSpace()"},
		{"trigger":	"walkIsActive	ALMotionProxy	MOTION","contents": "walkIsActive()"},
		{"trigger":	"setSensitivity	ALMovementDetectionProxy	VISION","contents": "setSensitivity(${1:const float sensitivity})"},
		{"trigger":	"insertData	ALMemoryProxy	CORE","contents": "insertData(${1:const std::string key},${2:const std::string value})"},
		{"trigger":	"fatal	ALLoggerProxy	CORE","contents": "fatal(${1:const std::string moduleName},${2:const std::string message})"},
		{"trigger":	"stopMicrophonesRecording	ALAudioDeviceProxy	AUDIO","contents": "stopMicrophonesRecording()"},
		{"trigger":	"getAngPosFromImgPos	ALVideoDeviceProxy	VISION","contents": "getAngPosFromImgPos(${1:const std::vector<float> imgPos})"},
		{"trigger":	"openAudioInputs	ALAudioDeviceProxy	AUDIO","contents": "openAudioInputs()"},
		{"trigger":	"playDefaultProject	ALBehaviorManagerProxy	CORE","contents": "playDefaultProject()"},
		{"trigger":	"initReception	ALInfraredProxy	SENSORS","contents": "initReception(${1:const int RepeatThreshold})"},
		{"trigger":	"transformInterpolation	ALMotionProxy	MOTION","contents": "transformInterpolation(${1:const std::string chainName},${2:const int space},${3:const AL::ALValue path},${4:const int axisMask},${5:const AL::ALValue duration},${6:const bool isAbsolute})"},
		{"trigger":	"setWalkTargetVelocity	ALMotionProxy	MOTION","contents": "setWalkTargetVelocity(${1:const float x},${2:const float y},${3:const float theta},${4:const float frequency},${5:const AL::ALValue feetGaitConfig})"},
		{"trigger":	"deleteResource	ALResourceManagerProxy	CORE","contents": "deleteResource(${1:const std::string resourceName},${2:const bool deleteChildResources})"},
		{"trigger":	"unsubscribe	ALSensorsProxy	SENSORS","contents": "unsubscribe(${1:const std::string name})"},
		{"trigger":	"getTime	DCMProxy	SENSORS","contents": "getTime(${1:const int offset})"},
		{"trigger":	"openHand	ALMotionProxy	MOTION","contents": "openHand(${1:const std::string handName})"},
		{"trigger":	"subscribeToEvent	ALMemoryProxy	CORE","contents": "subscribeToEvent(${1:const std::string name},${2:const std::string callbackModule},${3:const std::string callbackMessage},${4:const std::string callbacMethod})"},
		{"trigger":	"getDataListName	ALMemoryProxy	CORE","contents": "getDataListName()"},
		{"trigger":	"run	ALSensorsProxy	SENSORS","contents": "run()"},
		{"trigger":	"unsubscribeToEvent	ALMemoryProxy	CORE","contents": "unsubscribeToEvent(${1:const std::string name},${2:const std::string callbackModule})"},
		{"trigger":	"isTrackingEnabled	ALFaceDetectionProxy	VISION","contents": "isTrackingEnabled()"},
		{"trigger":	"getImageInfoFromAngularInfoWithResolution	ALVideoDeviceProxy	VISION","contents": "getImageInfoFromAngularInfoWithResolution(${1:const int CameraIndex},${2:const std::vector<float> AngularInfo},${3:const int ResolutionIndex})"},
		{"trigger":	"isActive	ALRedBallTrackerProxy	TRACKERS","contents": "isActive()"},
		{"trigger":	"getUserBehaviorNames	ALBehaviorManagerProxy	CORE","contents": "getUserBehaviorNames()"},
		{"trigger":	"getType	ALMemoryProxy	CORE","contents": "getType(${1:const std::string key})"},
		{"trigger":	"getAvailableVoices	ALTextToSpeechProxy	AUDIO","contents": "getAvailableVoices()"},
		{"trigger":	"sayToFile	ALTextToSpeechProxy	AUDIO","contents": "sayToFile(${1:const std::string stringToSay},${2:const std::string fileName})"},
		{"trigger":	"getPictureFormat	ALPhotoCaptureProxy	VISION","contents": "getPictureFormat()"},
		{"trigger":	"isNewData	ALFaceTrackerProxy	TRACKERS","contents": "isNewData()"},
		{"trigger":	"stopFrameGrabber	ALVideoDeviceProxy	VISION","contents": "stopFrameGrabber(${1:const int CameraIndex})"},
		{"trigger":	"setIntensity	ALLeds	SENSORS","contents": "setIntensity(${1:const std::string name},${2:const float intensity})"},
		{"trigger":	"subscribe	ALAudioSourceLocalizationProxy	AUDIO","contents": "subscribe(${1:const std::string name})"},
		{"trigger":	"playFileFromPosition	ALAudioPlayerProxy	AUDIO","contents": "playFileFromPosition(${1:const std::string fileName},${2:const float position},${3:const float volume},${4:const float pan})"},
		{"trigger":	"send8	ALInfraredProxy	SENSORS","contents": "send8(${1:const int Octet})"},
		{"trigger":	"stopVideo	ALVideoDeviceProxy	VISION","contents": "stopVideo(${1:const std::string Name})"},
		{"trigger":	"writePrefFile	ALPreferencesProxy	CORE","contents": "writePrefFile(${1:const std::string fileName},${2:const AL::ALValue prefs},${3:const bool ignoreMemoryNames})"},
		{"trigger":	"getCurrentPrecision	ALSensorsProxy	SENSORS","contents": "getCurrentPrecision()"},
		{"trigger":	"takePictures	ALPhotoCaptureProxy	VISION","contents": "takePictures(${1:const int numberOfPictures},${2:const std::string folderPath},${3:const std::string fileName})"},
		{"trigger":	"unsubscribe	ALAudioDeviceProxy	AUDIO","contents": "unsubscribe(${1:const std::string module})"},
		{"trigger":	"addDefaultBehavior	ALBehaviorManagerProxy	CORE","contents": "addDefaultBehavior(${1:const std::string prefixedBehavior})"},
		{"trigger":	"isModulePresent	ALLauncherProxy	CORE","contents": "isModulePresent(${1:const std::string moduleName})"},
		{"trigger":	"getResolution	ALVideoRecorderProxy	VISION","contents": "getResolution()"},
		{"trigger":	"setFilter	ALLoggerProxy	CORE","contents": "setFilter()"},
		{"trigger":	"sizesToResolution	ALVideoDeviceProxy	VISION","contents": "sizesToResolution(${1:const int Width},${2:const int Height})"},
		{"trigger":	"getDirectRawImagesRemote	ALVideoDeviceProxy	VISION","contents": "getDirectRawImagesRemote(${1:const std::string Name})"},
		{"trigger":	"getColorSpaces	ALVideoDeviceProxy	VISION","contents": "getColorSpaces(${1:const std::string Name})"},
		{"trigger":	"getData	ALMemoryProxy	CORE","contents": "getData(${1:const std::string key})"},
		{"trigger":	"setResolution	ALPhotoCaptureProxy	VISION","contents": "setResolution(${1:const int resolution})"},
		{"trigger":	"setParameter	ALSpeechRecognitionProxy	AUDIO","contents": "setParameter(${1:const std::string parameter},${2:const float value})"},
		{"trigger":	"angleInterpolation	ALMotionProxy	MOTION","contents": "angleInterpolation(${1:const AL::ALValue names},${2:const AL::ALValue angleLists},${3:const AL::ALValue timeLists},${4:const bool isAbsolute})"},
		{"trigger":	"launchExecutable	ALLauncherProxy	CORE","contents": "launchExecutable(${1:const std::string name})"},
		{"trigger":	"isFrameGrabberOff	ALVideoDeviceProxy	VISION","contents": "isFrameGrabberOff()"},
		{"trigger":	"getVIMFrameRate	ALVideoDeviceProxy	VISION","contents": "getVIMFrameRate()"},
		{"trigger":	"getLanguage	ALTextToSpeechProxy	AUDIO","contents": "getLanguage()"},
		{"trigger":	"killTasksUsingResources	ALMotionProxy	MOTION","contents": "killTasksUsingResources(${1:const std::vector<std::string> resourceNames})"},
		{"trigger":	"getColorSpace	ALVideoDeviceProxy	VISION","contents": "getColorSpace(${1:const std::string Name})"},
		{"trigger":	"subscribe	ALSensorsProxy	SENSORS","contents": "subscribe(${1:const std::string name},${2:const int period},${3:const float precision})"},
		{"trigger":	"positionInterpolations	ALMotionProxy	MOTION","contents": "positionInterpolations(${1:const std::vector<std::string> effectorNames},${2:const int taskSpaceForAllPaths},${3:const AL::ALValue paths},${4:const AL::ALValue axisMasks},${5:const AL::ALValue relativeTimes},${6:const bool isAbsolute})"},
		{"trigger":	"enableTracking	ALFaceDetectionProxy	VISION","contents": "enableTracking(${1:const bool enable})"},
		{"trigger":	"setOutputVolume	ALAudioDeviceProxy	AUDIO","contents": "setOutputVolume(${1:const int volume})"},
		{"trigger":	"getRobotPosition	ALMotionProxy	MOTION","contents": "getRobotPosition(${1:const bool useSensors})"},
		{"trigger":	"getBehaviorNames	ALBehaviorManagerProxy	CORE","contents": "getBehaviorNames()"},
		{"trigger":	"setFrameRate	ALVideoDeviceProxy	VISION","contents": "setFrameRate(${1:const std::string Name},${2:const int Fps})"},
		{"trigger":	"getSensorNames	ALMotionProxy	MOTION","contents": "getSensorNames()"},
		{"trigger":	"moveInit	ALMotionProxy	MOTION","contents": "moveInit()"},
		{"trigger":	"setDescription	ALMemoryProxy	CORE","contents": "setDescription(${1:const std::string name},${2:const std::string description})"},
		{"trigger":	"getReferenceImage	ALVisualCompassProxy	VISION","contents": "getReferenceImage()"},
		{"trigger":	"randomEyes	ALLeds	SENSORS","contents": "randomEyes(${1:const float duration})"},
		{"trigger":	"fade	ALLeds	SENSORS","contents": "fade(${1:const std::string name},${2:const float intensity},${3:const float duration})"},
		{"trigger":	"getActiveCameras	ALVideoDeviceProxy	VISION","contents": "getActiveCameras(${1:const std::string Name})"},
		{"trigger":	"getLoadedFilesIds	ALAudioPlayerProxy	AUDIO","contents": "getLoadedFilesIds()"},
		{"trigger":	"changeDatabase	ALVisionRecognitionProxy	VISION","contents": "changeDatabase(${1:const std::string databasePath},${2:const std::string databaseName})"},
		{"trigger":	"playFile	ALAudioPlayerProxy	AUDIO","contents": "playFile(${1:const std::string fileName})"},
		{"trigger":	"wbGoToBalance	ALMotionProxy	MOTION","contents": "wbGoToBalance(${1:const std::string supportLeg},${2:const float duration})"},
		{"trigger":	"enableEnergyComputation	ALAudioDeviceProxy	AUDIO","contents": "enableEnergyComputation()"},
		{"trigger":	"setVideoFormat	ALVideoRecorderProxy	VISION","contents": "setVideoFormat(${1:const std::string videoFormat})"},
		{"trigger":	"getFrameRate	ALVideoDeviceProxy	VISION","contents": "getFrameRate(${1:const int CameraIndex})"},
		{"trigger":	"playSine	ALAudioPlayerProxy	AUDIO","contents": "playSine(${1:const int frequence},${2:const int gain},${3:const int pan},${4:const float duration})"},
		{"trigger":	"debug	ALLoggerProxy	CORE","contents": "debug(${1:const std::string moduleName},${2:const std::string message})"},
		{"trigger":	"getBodyNames	ALMotionProxy	MOTION","contents": "getBodyNames(${1:const std::string name})"},
		{"trigger":	"clearDatabase	ALFaceDetectionProxy	VISION","contents": "clearDatabase()"},
		{"trigger":	"insertData	ALMemoryProxy	CORE","contents": "insertData(${1:const std::string key},${2:const AL::ALValue data})"},
		{"trigger":	"getMyPeriod	ALSensorsProxy	SENSORS","contents": "getMyPeriod(${1:const std::string name})"},
		{"trigger":	"warn	ALLoggerProxy	CORE","contents": "warn(${1:const std::string moduleName},${2:const std::string message})"},
		{"trigger":	"setWalkTargetVelocity	ALMotionProxy	MOTION","contents": "setWalkTargetVelocity(${1:const float x},${2:const float y},${3:const float theta},${4:const float frequency},${5:const AL::ALValue leftFootGaitConfig},${6:const AL::ALValue rightFootGaitConfig})"},
		{"trigger":	"on	ALLeds	SENSORS","contents": "on(${1:const std::string name})"},
		{"trigger":	"removeData	ALMemoryProxy	CORE","contents": "removeData(${1:const std::string key})"},
		{"trigger":	"startFrameGrabber	ALVideoDeviceProxy	VISION","contents": "startFrameGrabber()"},
		{"trigger":	"playWebStream	ALAudioPlayerProxy	AUDIO","contents": "playWebStream(${1:const std::string streamName},${2:const float volume},${3:const float pan})"},
		{"trigger":	"getRightMicEnergy	ALAudioDeviceProxy	AUDIO","contents": "getRightMicEnergy()"},
		{"trigger":	"getEventList	ALMemoryProxy	CORE","contents": "getEventList()"},
		{"trigger":	"setMasterVolume	ALAudioPlayerProxy	AUDIO","contents": "setMasterVolume(${1:const float volume})"},
		{"trigger":	"say	ALTextToSpeechProxy	AUDIO","contents": "say(${1:const std::string stringToSay})"},
		{"trigger":	"setDarknessThreshold	ALDarknessDetectionProxy	VISION","contents": "setDarknessThreshold(${1:const int threshold})"},
		{"trigger":	"resolutionToSizes	ALVideoDeviceProxy	VISION","contents": "resolutionToSizes(${1:const int Resolution})"},
		{"trigger":	"getRobotVelocity	ALMotionProxy	MOTION","contents": "getRobotVelocity()"},
		{"trigger":	"stopBehavior	ALBehaviorManagerProxy	CORE","contents": "stopBehavior(${1:const std::string name})"},
		{"trigger":	"isProcessing	ALVisionExtractor	CORE","contents": "isProcessing()"},
		{"trigger":	"raiseMicroEvent	ALMemoryProxy	CORE","contents": "raiseMicroEvent(${1:const std::string name},${2:const AL::ALValue value})"},
		{"trigger":	"getMicroEventList	ALMemoryProxy	CORE","contents": "getMicroEventList()"},
		{"trigger":	"sendRemoteKey	ALInfraredProxy	SENSORS","contents": "sendRemoteKey(${1:const std::string Remote},${2:const std::string Key})"},
		{"trigger":	"startMicrophonesRecording	ALAudioRecorderProxy	AUDIO","contents": "startMicrophonesRecording(${1:const std::string filename},${2:const std::string type},${3:const int samplerate},${4:const AL::ALValue channels})"},
		{"trigger":	"getAngles	ALMotionProxy	MOTION","contents": "getAngles(${1:const AL::ALValue names},${2:const bool useSensors})"},
		{"trigger":	"setParameter	ALAudioSourceLocalizationProxy	AUDIO","contents": "setParameter(${1:const std::string parameter},${2:const AL::ALValue value})"},
		{"trigger":	"moveToward	ALMotionProxy	MOTION","contents": "moveToward(${1:const float x},${2:const float y},${3:const float theta},${4:const AL::ALValue moveConfig})"},
		{"trigger":	"enableStateResource	ALResourceManagerProxy	CORE","contents": "enableStateResource(${1:const std::string resourceName},${2:const bool enabled})"},
		{"trigger":	"setVisualExpression	ALSpeechRecognitionProxy	AUDIO","contents": "setVisualExpression(${1:const bool setOrNot})"},
		{"trigger":	"listLED	ALLeds	SENSORS","contents": "listLED(${1:const std::string arg1})"},
		{"trigger":	"getSystemBehaviorNames	ALBehaviorManagerProxy	CORE","contents": "getSystemBehaviorNames()"},
		{"trigger":	"isPaused	ALVisionExtractor	CORE","contents": "isPaused()"},
		{"trigger":	"getRunningBehaviors	ALBehaviorManagerProxy	CORE","contents": "getRunningBehaviors()"},
		{"trigger":	"getCameraModel	ALVideoDeviceProxy	VISION","contents": "getCameraModel(${1:const int CameraIndex})"},
		{"trigger":	"getMyPrecision	ALExtractor	CORE","contents": "getMyPrecision(${1:const std::string pSubscribedName})"},
		{"trigger":	"setSmartStiffnessEnabled	ALMotionProxy	MOTION","contents": "setSmartStiffnessEnabled(${1:const bool enable})"},
		{"trigger":	"setClientPreferences	ALAudioDeviceProxy	AUDIO","contents": "setClientPreferences(${1:const std::string name},${2:const int sampleRate},${3:const int channels},${4:const int deinterleaved})"},
		{"trigger":	"areResourcesAvailable	ALMotionProxy	MOTION","contents": "areResourcesAvailable(${1:const std::vector<std::string> resourceNames})"},
		{"trigger":	"move	ALMotionProxy	MOTION","contents": "move(${1:const float x},${2:const float y},${3:const float theta},${4:const AL::ALValue moveConfig})"},
		{"trigger":	"subscribeRemoteModule	ALAudioDeviceProxy	AUDIO","contents": "subscribeRemoteModule(${1:const std::string module})"},
		{"trigger":	"send32	ALInfraredProxy	SENSORS","contents": "send32(${1:const std::string Data_IR})"},
		{"trigger":	"updatePeriod	ALSensorsProxy	SENSORS","contents": "updatePeriod(${1:const std::string name},${2:const int period})"},
		{"trigger":	"stopMicrophonesRecording	ALAudioRecorderProxy	AUDIO","contents": "stopMicrophonesRecording()"},
		{"trigger":	"declare	ALBonjourProxy	CORE","contents": "declare()"},
		{"trigger":	"moveTo	ALMotionProxy	MOTION","contents": "moveTo(${1:const AL::ALValue controlPoints})"},
		{"trigger":	"waitUntilMoveIsFinished	ALMotionProxy	MOTION","contents": "waitUntilMoveIsFinished()"},
		{"trigger":	"wbEnable	ALMotionProxy	MOTION","contents": "wbEnable(${1:const bool isEnabled})"},
		{"trigger":	"getParameter	ALAudioDeviceProxy	AUDIO","contents": "getParameter(${1:const std::string parameter})"},
		{"trigger":	"getAngSizeFromImgSize	ALVideoDeviceProxy	VISION","contents": "getAngSizeFromImgSize(${1:const std::vector<float> imgSize})"},
		{"trigger":	"putImage	ALVideoDeviceProxy	VISION","contents": "putImage(${1:const AL::ALValue ImageBuffer})"},
		{"trigger":	"removeDefaultBehavior	ALBehaviorManagerProxy	CORE","contents": "removeDefaultBehavior(${1:const std::string name})"},
		{"trigger":	"getAvailableLanguages	ALTextToSpeechProxy	AUDIO","contents": "getAvailableLanguages()"},
		{"trigger":	"getResolutions	ALVideoDeviceProxy	VISION","contents": "getResolutions(${1:const std::string Name})"},
		{"trigger":	"getDirectRawImagesLocal	ALVideoDeviceProxy	VISION","contents": "getDirectRawImagesLocal(${1:const std::string Name})"},
		{"trigger":	"getReferenceQuality	ALVisualCompassProxy	VISION","contents": "getReferenceQuality()"},
		{"trigger":	"getResolution	ALVideoDeviceProxy	VISION","contents": "getResolution(${1:const int CameraIndex})"},
		{"trigger":	"tetheringName	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "tetheringName(${1:const std::string technology})"},
		{"trigger":	"setCameraParameter	ALVideoDeviceProxy	VISION","contents": "setCameraParameter(${1:const std::string Name},${2:const int Id},${3:const int NewValue})"},
		{"trigger":	"setServiceConfiguration	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "setServiceConfiguration(${1:const AL::ALValue configuration})"},
		{"trigger":	"rest	ALMotionProxy	MOTION","contents": "rest()"},
		{"trigger":	"getJointNames	ALMotionProxy	MOTION","contents": "getJointNames(${1:const std::string name})"},
		{"trigger":	"getTaskList	ALMotionProxy	MOTION","contents": "getTaskList()"},
		{"trigger":	"removeBehavior	ALBehaviorManagerProxy	CORE","contents": "removeBehavior(${1:const std::string name})"},
		{"trigger":	"subscribe	ALSpeechRecognitionProxy	AUDIO","contents": "subscribe(${1:const std::string name})"},
		{"trigger":	"lowDebug	ALLoggerProxy	CORE","contents": "lowDebug(${1:const std::string moduleName},${2:const std::string message})"},
		{"trigger":	"setColorSpace	ALVideoDeviceProxy	VISION","contents": "setColorSpace(${1:const std::string Name},${2:const int ColorSpace})"},
		{"trigger":	"setFootSteps	ALMotionProxy	MOTION","contents": "setFootSteps(${1:const std::vector<std::string> legName},${2:const AL::ALValue footSteps},${3:const std::vector<float> timeList},${4:const bool clearExisting})"},
		{"trigger":	"setAngles	ALMotionProxy	MOTION","contents": "setAngles(${1:const AL::ALValue names},${2:const AL::ALValue angles},${3:const float fractionMaxSpeed})"},
		{"trigger":	"getStiffnesses	ALMotionProxy	MOTION","contents": "getStiffnesses(${1:const AL::ALValue jointName})"},
		{"trigger":	"startRecording	ALVideoRecorderProxy	VISION","contents": "startRecording(${1:const std::string folderPath},${2:const std::string fileName})"},
		{"trigger":	"sendRemoteKeyWithTime	ALInfraredProxy	SENSORS","contents": "sendRemoteKeyWithTime(${1:const std::string Remote},${2:const std::string Key},${3:const int TimeMs})"},
		{"trigger":	"learnFace	ALFaceDetectionProxy	VISION","contents": "learnFace(${1:const std::string name})"},
		{"trigger":	"getPosition	ALFaceTrackerProxy	TRACKERS","contents": "getPosition()"},
		{"trigger":	"angleInterpolationBezier	ALMotionProxy	MOTION","contents": "angleInterpolationBezier(${1:const std::vector<std::string> jointNames},${2:const AL::ALValue times},${3:const AL::ALValue controlPoints})"},
		{"trigger":	"moveTo	ALMotionProxy	MOTION","contents": "moveTo(${1:const AL::ALValue controlPoints},${2:const AL::ALValue moveConfig})"},
		{"trigger":	"setWalkTargetVelocity	ALMotionProxy	MOTION","contents": "setWalkTargetVelocity(${1:const float x},${2:const float y},${3:const float theta},${4:const float frequency})"},
		{"trigger":	"getDataListName	ALResourceManagerProxy	CORE","contents": "getDataListName()"},
		{"trigger":	"enableNotifications	ALTextToSpeechProxy	AUDIO","contents": "enableNotifications()"},
		{"trigger":	"getPostureFamily	ALRobotPosture	MOTION","contents": "getPostureFamily()"},
		{"trigger":	"subscribe	ALSensorsProxy	SENSORS","contents": "subscribe(${1:const std::string name})"},
		{"trigger":	"waitForLocalResourcesTree	ALResourceManagerProxy	CORE","contents": "waitForLocalResourcesTree(${1:const std::vector<std::string> resourceName},${2:const boost::shared_ptr<AL::ALHierarchyOwner> treeOwnerPtr},${3:const std::string callbackName},${4:const int timeoutSeconds})"},
		{"trigger":	"isInGroup	ALResourceManagerProxy	CORE","contents": "isInGroup(${1:const std::string resourceGroupName},${2:const std::string resourceName})"},
		{"trigger":	"getMass	ALMotionProxy	MOTION","contents": "getMass(${1:const std::string pName})"},
		{"trigger":	"separator	ALLoggerProxy	CORE","contents": "separator()"},
		{"trigger":	"unregisterModuleReference	ALMemoryProxy	CORE","contents": "unregisterModuleReference(${1:const std::string moduleName})"},
		{"trigger":	"getVIMColorSpace	ALVideoDeviceProxy	VISION","contents": "getVIMColorSpace()"},
		{"trigger":	"halfPress	ALVisionToolboxProxy	VISION","contents": "halfPress()"},
		{"trigger":	"setCameraParameterToDefault	ALVideoDeviceProxy	VISION","contents": "setCameraParameterToDefault(${1:const std::string Name},${2:const int Id})"},
		{"trigger":	"getActiveCamera	ALVideoDeviceProxy	VISION","contents": "getActiveCamera()"},
		{"trigger":	"isFrameGrabberOff	ALVideoDeviceProxy	VISION","contents": "isFrameGrabberOff(${1:const int CameraIndex})"},
		{"trigger":	"readPrefFile	ALPreferencesProxy	CORE","contents": "readPrefFile(${1:const std::string fileName},${2:const bool autoGenerateMemoryNames})"},
		{"trigger":	"pause	ALAudioPlayerProxy	AUDIO","contents": "pause(${1:const int taskId})"},
		{"trigger":	"getVIMResolution	ALVideoDeviceProxy	VISION","contents": "getVIMResolution()"},
		{"trigger":	"takePicture	ALPhotoCaptureProxy	VISION","contents": "takePicture(${1:const std::string folderPath},${2:const std::string fileName})"},
		{"trigger":	"getCurrentPeriod	ALExtractor	CORE","contents": "getCurrentPeriod()"},
		{"trigger":	"ping	ALModule	CORE","contents": "ping()"},
		{"trigger":	"sayToFileAndPlay	ALTextToSpeechProxy	AUDIO","contents": "sayToFileAndPlay(${1:const std::string stringToSay})"},
		{"trigger":	"stopAll	ALTextToSpeechProxy	AUDIO","contents": "stopAll()"},
		{"trigger":	"releaseDirectRawImages	ALVideoDeviceProxy	VISION","contents": "releaseDirectRawImages(${1:const std::string Name})"},
		{"trigger":	"areResourcesOwnedBy	ALResourceManagerProxy	CORE","contents": "areResourcesOwnedBy(${1:const std::vector<std::string> resourceNameList},${2:const std::string ownerName})"},
		{"trigger":	"getSubscribers	ALMemoryProxy	CORE","contents": "getSubscribers(${1:const std::string name})"},
		{"trigger":	"isBehaviorPresent	ALBehaviorManagerProxy	CORE","contents": "isBehaviorPresent(${1:const std::string prefixedBehavior})"},
		{"trigger":	"setParamDefault	ALVideoDeviceProxy	VISION","contents": "setParamDefault(${1:const int Param})"},
		{"trigger":	"putImage	ALVideoDeviceProxy	VISION","contents": "putImage(${1:const int CameraIndex},${2:const int Width},${3:const int Height},${4:const AL::ALValue ImageBuffer})"},
		{"trigger":	"subscribe	ALSoundDetection	AUDIO","contents": "subscribe(${1:const std::string name})"},
		{"trigger":	"setResolutions	ALVideoDeviceProxy	VISION","contents": "setResolutions(${1:const std::string Name},${2:const AL::ALValue Resolutions})"},
		{"trigger":	"laserOFF	ALLaserProxy	SENSORS","contents": "laserOFF()"},
		{"trigger":	"subscribeCamera	ALVideoDeviceProxy	VISION","contents": "subscribeCamera(${1:const std::string Name},${2:const int CameraIndex},${3:const int Resolution},${4:const int ColorSpace},${5:const int Fps})"},
		{"trigger":	"setMotionConfig	ALMotionProxy	MOTION","contents": "setMotionConfig(${1:const AL::ALValue config})"},
		{"trigger":	"setCamerasParameter	ALVideoDeviceProxy	VISION","contents": "setCamerasParameter(${1:const std::string Name},${2:const int Id},${3:const AL::ALValue NewValue})"},
		{"trigger":	"setColorSpaces	ALVideoDeviceProxy	VISION","contents": "setColorSpaces(${1:const std::string Name},${2:const AL::ALValue ColorSpaces})"},
		{"trigger":	"walkTo	ALMotionProxy	MOTION","contents": "walkTo(${1:const AL::ALValue controlPoints})"},
		{"trigger":	"killTask	ALMotionProxy	MOTION","contents": "killTask(${1:const int motionTaskID})"},
		{"trigger":	"setPictureFormat	ALPhotoCaptureProxy	VISION","contents": "setPictureFormat(${1:const std::string pictureFormat})"},
		{"trigger":	"getExpectedImageParameters	ALVideoDeviceProxy	VISION","contents": "getExpectedImageParameters()"},
		{"trigger":	"playSine	ALAudioDeviceProxy	AUDIO","contents": "playSine(${1:const int frequence},${2:const int gain},${3:const int pan},${4:const float duration})"},
		{"trigger":	"getIntensity	ALLeds	SENSORS","contents": "getIntensity(${1:const std::string name})"},
		{"trigger":	"getNextRobotPosition	ALMotionProxy	MOTION","contents": "getNextRobotPosition()"},
		{"trigger":	"getDirectRawImageLocal	ALVideoDeviceProxy	VISION","contents": "getDirectRawImageLocal(${1:const std::string Name})"},
		{"trigger":	"getFrontMicEnergy	ALAudioDeviceProxy	AUDIO","contents": "getFrontMicEnergy()"},
		{"trigger":	"getExpectedImageParameters	ALVideoDeviceProxy	VISION","contents": "getExpectedImageParameters(${1:const int CameraIndex})"},
		{"trigger":	"getResolution	ALVideoDeviceProxy	VISION","contents": "getResolution(${1:const std::string Name})"},
		{"trigger":	"error	ALLoggerProxy	CORE","contents": "error(${1:const std::string moduleName},${2:const std::string message})"},
		{"trigger":	"calibration	DCMProxy	SENSORS","contents": "calibration(${1:const AL::ALValue calibrationInput})"},
		{"trigger":	"takePictures	ALPhotoCaptureProxy	VISION","contents": "takePictures(${1:const int numberOfPictures},${2:const std::string folderPath},${3:const std::string fileName},${4:const bool overwrite})"},
		{"trigger":	"playFileInLoop	ALAudioPlayerProxy	AUDIO","contents": "playFileInLoop(${1:const std::string fileName})"},
		{"trigger":	"getSubscribersInfo	ALExtractor	CORE","contents": "getSubscribersInfo()"},
		{"trigger":	"getOutputNames	ALExtractor	CORE","contents": "getOutputNames(${1:void})"},
		{"trigger":	"releaseResource	ALResourceManagerProxy	CORE","contents": "releaseResource(${1:const std::string resourceName},${2:const std::string ownerName})"},
		{"trigger":	"waitUntilWalkIsFinished	ALMotionProxy	MOTION","contents": "waitUntilWalkIsFinished()"},
		{"trigger":	"startTracker	ALFaceTrackerProxy	TRACKERS","contents": "startTracker()"},
		{"trigger":	"getImagesRemote	ALVideoDeviceProxy	VISION","contents": "getImagesRemote(${1:const std::string Name})"},
		{"trigger":	"unsubscribe	ALVideoDeviceProxy	VISION","contents": "unsubscribe(${1:const std::string Name})"},
		{"trigger":	"getGVMColorSpace	ALVideoDeviceProxy	VISION","contents": "getGVMColorSpace(${1:const std::string id})"},
		{"trigger":	"getFallManagerEnabled	ALMotionProxy	MOTION","contents": "getFallManagerEnabled()"},
		{"trigger":	"getPrefix	DCMProxy	SENSORS","contents": "getPrefix()"},
		{"trigger":	"getColorSpace	ALVideoRecorderProxy	VISION","contents": "getColorSpace()"},
		{"trigger":	"setParameter	ALSoundDetection	AUDIO","contents": "setParameter(${1:const std::string parameter},${2:const float value})"},
		{"trigger":	"setPanorama	ALAudioPlayerProxy	AUDIO","contents": "setPanorama(${1:const float pan})"},
		{"trigger":	"lowInfo	ALLoggerProxy	CORE","contents": "lowInfo(${1:const std::string moduleName},${2:const std::string message})"},
		{"trigger":	"setCaptureInterval	ALPhotoCaptureProxy	VISION","contents": "setCaptureInterval(${1:const int captureInterval})"},
		{"trigger":	"setDetectingLength	ALLaserProxy	SENSORS","contents": "setDetectingLength(${1:const int length_min_l},${2:const int length_max_l})"},
		{"trigger":	"getPostureFamilyList	ALRobotPosture	MOTION","contents": "getPostureFamilyList()"},
		{"trigger":	"getCollisionProtectionEnabled	ALMotionProxy	MOTION","contents": "getCollisionProtectionEnabled(${1:const std::string pChainName})"},
		{"trigger":	"getFrameRate	ALVideoRecorderProxy	VISION","contents": "getFrameRate()"},
		{"trigger":	"getPosition	ALRedBallTrackerProxy	TRACKERS","contents": "getPosition()"},
		{"trigger":	"wakeUp	ALMotionProxy	MOTION","contents": "wakeUp()"},
		{"trigger":	"state	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "state()"},
		{"trigger":	"getEvents	ALSoundDetection	AUDIO","contents": "getEvents(${1:const std::string type})"},
		{"trigger":	"wait	ALModule	CORE","contents": "wait(${1:const int id},${2:const int timeout})"},
		{"trigger":	"disconnect	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "disconnect(${1:const std::string serviceId})"},
		{"trigger":	"getGVMResolution	ALVideoDeviceProxy	VISION","contents": "getGVMResolution(${1:const std::string id})"},
		{"trigger":	"pause	ALVisionExtractor	CORE","contents": "pause(${1:const bool paused})"},
		{"trigger":	"setActiveCameras	ALVideoDeviceProxy	VISION","contents": "setActiveCameras(${1:const std::string Name},${2:const AL::ALValue ActiveCameras})"},
		{"trigger":	"setWhiteBalance	ALVisionToolboxProxy	VISION","contents": "setWhiteBalance(${1:const int camera})"},
		{"trigger":	"getMoveConfig	ALMotionProxy	MOTION","contents": "getMoveConfig(${1:const std::string config})"},
		{"trigger":	"closeAudioOutputs	ALAudioDeviceProxy	AUDIO","contents": "closeAudioOutputs()"},
		{"trigger":	"releaseImage	ALVideoDeviceProxy	VISION","contents": "releaseImage(${1:const std::string Name})"},
		{"trigger":	"setParameter	ALAudioDeviceProxy	AUDIO","contents": "setParameter(${1:const std::string parameter},${2:const int value})"},
		{"trigger":	"off	ALLeds	SENSORS","contents": "off(${1:const std::string name})"},
		{"trigger":	"getListData	ALMemoryProxy	CORE","contents": "getListData(${1:const AL::ALValue keyList})"},
		{"trigger":	"onClientDisconnected	ALVideoDeviceProxy	VISION","contents": "onClientDisconnected(${1:const std::string eventName},${2:const AL::ALValue eventContents},${3:const std::string message})"},
		{"trigger":	"sendLocalBufferToOutput	ALAudioDeviceProxy	AUDIO","contents": "sendLocalBufferToOutput(${1:const int nbOfFrames},${2:const int buffer})"},
		{"trigger":	"transformInterpolations	ALMotionProxy	MOTION","contents": "transformInterpolations(${1:const std::vector<std::string> effectorNames},${2:const int taskSpaceForAllPaths},${3:const AL::ALValue paths},${4:const AL::ALValue axisMasks},${5:const AL::ALValue relativeTimes},${6:const bool isAbsolute})"},
		{"trigger":	"getRearMicEnergy	ALAudioDeviceProxy	AUDIO","contents": "getRearMicEnergy()"},
		{"trigger":	"getOutputVolume	ALAudioDeviceProxy	AUDIO","contents": "getOutputVolume()"},
		{"trigger":	"wbEnableEffectorControl	ALMotionProxy	MOTION","contents": "wbEnableEffectorControl(${1:const std::string effectorName},${2:const bool isEnabled})"},
		{"trigger":	"changeTransform	ALMotionProxy	MOTION","contents": "changeTransform(${1:const std::string chainName},${2:const int space},${3:const std::vector<float> transform},${4:const float fractionMaxSpeed},${5:const int axisMask})"},
		{"trigger":	"unsubscribe	ALSoundDetection	AUDIO","contents": "unsubscribe(${1:const std::string name})"},
		{"trigger":	"walkTo	ALMotionProxy	MOTION","contents": "walkTo(${1:const float x},${2:const float y},${3:const float theta})"},
		{"trigger":	"getDataList	ALMemoryProxy	CORE","contents": "getDataList(${1:const std::string filter})"},
		{"trigger":	"setCamerasParameterToDefault	ALVideoDeviceProxy	VISION","contents": "setCamerasParameterToDefault(${1:const std::string Name},${2:const int Id})"},
		{"trigger":	"sendRemoteBufferToOutput	ALAudioDeviceProxy	AUDIO","contents": "sendRemoteBufferToOutput(${1:const int nbOfFrames},${2:const AL::ALValue buffer})"},
		{"trigger":	"getMatchingQuality	ALVisualCompassProxy	VISION","contents": "getMatchingQuality()"},
		{"trigger":	"enableReferenceRefresh	ALVisualCompassProxy	VISION","contents": "enableReferenceRefresh(${1:const bool refresh})"},
		{"trigger":	"removeHandler	ALLoggerProxy	CORE","contents": "removeHandler(${1:const std::string name})"},
		{"trigger":	"isRecording	ALVideoRecorderProxy	VISION","contents": "isRecording()"},
		{"trigger":	"unSubscribeRemoteModule	ALAudioDeviceProxy	AUDIO","contents": "unSubscribeRemoteModule(${1:const std::string module})"},
		{"trigger":	"disableTethering	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "disableTethering(${1:const std::string technology})"},
		{"trigger":	"getSubscribersInfo	ALSensorsProxy	SENSORS","contents": "getSubscribersInfo()"},
		{"trigger":	"getFootGaitConfig	ALMotionProxy	MOTION","contents": "getFootGaitConfig(${1:const std::string config})"},
		{"trigger":	"getDescriptionList	ALMemoryProxy	CORE","contents": "getDescriptionList(${1:const std::vector<std::string> keys})"},
		{"trigger":	"setLanguage	ALTextToSpeechProxy	AUDIO","contents": "setLanguage(${1:const std::string language})"},
		{"trigger":	"takePicture	ALVisionToolboxProxy	VISION","contents": "takePicture()"},
		{"trigger":	"forget	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "forget(${1:const std::string serviceId})"},
		{"trigger":	"unsubscribeToMicroEvent	ALMemoryProxy	CORE","contents": "unsubscribeToMicroEvent(${1:const std::string name},${2:const std::string callbackModule})"},
		{"trigger":	"getData	ALResourceManagerProxy	CORE","contents": "getData(${1:const std::string key},${2:const int deprecatedParameter})"},
		{"trigger":	"stopAndGetRecording	ALMotionRecorder	MOTION","contents": "stopAndGetRecording()"},
		{"trigger":	"insertData	ALMemoryProxy	CORE","contents": "insertData(${1:const std::string key},${2:const float value})"},
		{"trigger":	"getExtractorEvent	ALMemoryProxy	CORE","contents": "getExtractorEvent(${1:const std::string extractorName})"},
		{"trigger":	"subscribe	ALVideoDeviceProxy	VISION","contents": "subscribe(${1:const std::string Name},${2:const int resolution},${3:const int colorSpace},${4:const int fps})"},
		{"trigger":	"waitForResource	ALResourceManagerProxy	CORE","contents": "waitForResource(${1:const std::string resourceName},${2:const std::string ownerName},${3:const std::string callbackName},${4:const int timeoutSeconds})"},
		{"trigger":	"getAngularPositionFromImagePosition	ALVideoDeviceProxy	VISION","contents": "getAngularPositionFromImagePosition(${1:const int CameraIndex},${2:const std::vector<float> ImagePosition})"},
		{"trigger":	"stopAllBehaviors	ALBehaviorManagerProxy	CORE","contents": "stopAllBehaviors()"},
		{"trigger":	"setParam	ALVideoDeviceProxy	VISION","contents": "setParam(${1:const int Param},${2:const int NewValue})"},
		{"trigger":	"setFrameRate	ALVisionExtractor	CORE","contents": "setFrameRate(${1:const int framerate})"},
		{"trigger":	"stopTPR	ALVisionToolboxProxy	VISION","contents": "stopTPR(${1:const std::string pathAndNameRoot},${2:const std::string imageRecordFormat})"},
		{"trigger":	"forgetPerson	ALFaceDetectionProxy	VISION","contents": "forgetPerson(${1:const std::string name})"},
		{"trigger":	"getImageLocal	ALVideoDeviceProxy	VISION","contents": "getImageLocal(${1:const std::string Name})"},
		{"trigger":	"goToPosture	ALRobotPosture	MOTION","contents": "goToPosture(${1:const std::string postureName},${2:const float speed})"},
		{"trigger":	"getRobotConfig	ALMotionProxy	MOTION","contents": "getRobotConfig()"},
		{"trigger":	"getDirectRawImageRemote	ALVideoDeviceProxy	VISION","contents": "getDirectRawImageRemote(${1:const std::string Name})"},
		{"trigger":	"preloadBehavior	ALBehaviorManagerProxy	CORE","contents": "preloadBehavior(${1:const std::string name})"},
		{"trigger":	"stopWalk	ALMotionProxy	MOTION","contents": "stopWalk()"},
		{"trigger":	"subscribe	ALExtractor	CORE","contents": "subscribe(${1:const std::string pSubscribedName})"},
		{"trigger":	"setLanguageDefaultVoice	ALTextToSpeechProxy	AUDIO","contents": "setLanguageDefaultVoice(${1:const std::string language},${2:const std::string voice})"},
		{"trigger":	"rasta	ALLeds	SENSORS","contents": "rasta(${1:const float duration})"},
		{"trigger":	"stopRecording	ALVideoRecorderProxy	VISION","contents": "stopRecording()"},
		{"trigger":	"walkTo	ALMotionProxy	MOTION","contents": "walkTo(${1:const AL::ALValue controlPoints},${2:const AL::ALValue feetGaitConfig})"},
		{"trigger":	"loadFile	ALAudioPlayerProxy	AUDIO","contents": "loadFile(${1:const std::string fileName})"},
		{"trigger":	"playFile	ALAudioPlayerProxy	AUDIO","contents": "playFile(${1:const std::string fileName},${2:const float volume},${3:const float pan})"},
		{"trigger":	"preferences	DCMProxy	SENSORS","contents": "preferences(${1:const std::string action},${2:const std::string target},${3:const std::string keyName},${4:const AL::ALValue keyValue})"},
		{"trigger":	"setLanguage	ALSpeechRecognitionProxy	AUDIO","contents": "setLanguage(${1:const std::string language})"},
		{"trigger":	"updatePrecision	ALSensorsProxy	SENSORS","contents": "updatePrecision(${1:const std::string name},${2:const float precision})"},
		{"trigger":	"getDefaultBehaviors	ALBehaviorManagerProxy	CORE","contents": "getDefaultBehaviors()"},
		{"trigger":	"isVideoRecording	ALVisionToolboxProxy	VISION","contents": "isVideoRecording()"},
		{"trigger":	"startMicrophonesRecording	ALAudioDeviceProxy	AUDIO","contents": "startMicrophonesRecording(${1:const std::string fileName})"},
		{"trigger":	"setStiffnesses	ALMotionProxy	MOTION","contents": "setStiffnesses(${1:const AL::ALValue names},${2:const AL::ALValue stiffnesses})"},
		{"trigger":	"goTo	ALAudioPlayerProxy	AUDIO","contents": "goTo(${1:const int taskId},${2:const float position})"},
		{"trigger":	"setVocabulary	ALSpeechRecognitionProxy	AUDIO","contents": "setVocabulary(${1:const std::vector<std::string> vocabulary},${2:const bool enableWordSpotting})"},
		{"trigger":	"releaseLocalResource	ALResourceManagerProxy	CORE","contents": "releaseLocalResource(${1:const std::string resourceName},${2:const boost::shared_ptr<AL::ALOwner> ownerName})"},
		{"trigger":	"getSummary	ALMotionProxy	MOTION","contents": "getSummary()"},
		{"trigger":	"setServiceInput	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "setServiceInput(${1:const AL::ALValue input})"},
		{"trigger":	"disableNotifications	ALTextToSpeechProxy	AUDIO","contents": "disableNotifications()"},
		{"trigger":	"enableTethering	ALConnectionManagerProxy	CONNECTIONMANAGER","contents": "enableTethering(${1:const std::string technology},${2:const std::string name},${3:const std::string passphrase})"},
		{"trigger":	"getCurrentImage	ALVisualCompassProxy	VISION","contents": "getCurrentImage()"},
		{"trigger":	"setFrameRate	ALVideoRecorderProxy	VISION","contents": "setFrameRate(${1:const int frameRate})"},
		{"trigger":	"NetworkDefaultTechnologyChanged	CONNECTIONMANAGER	 EVENT","contents": "NetworkDefaultTechnologyChanged"},
		{"trigger":	"NetworkTechnologyRemoved	CORE	 EVENT","contents": "NetworkTechnologyRemoved"},
		{"trigger":	"SonarRightDetected	SENSORS	 EVENT","contents": "SonarRightDetected"},
		{"trigger":	"SonarLeftNothingDetected	SENSORS	 EVENT","contents": "SonarLeftNothingDetected"},
		{"trigger":	"LeftBumperPressed	SENSORS	 EVENT","contents": "LeftBumperPressed"},
		{"trigger":	"DangerousObstacleDetected	MOTION	 EVENT","contents": "DangerousObstacleDetected"},
		{"trigger":	"SoundDetected	AUDIO	 EVENT","contents": "SoundDetected"},
		{"trigger":	"PositionOfCurrentWord	AUDIO	 EVENT","contents": "PositionOfCurrentWord"},
		{"trigger":	"SonarRightNothingDetected	SENSORS	 EVENT","contents": "SonarRightNothingDetected"},
		{"trigger":	"WordRecognized	AUDIO	 EVENT","contents": "WordRecognized"},
		{"trigger":	"BehaviorsRun	CORE	 EVENT","contents": "BehaviorsRun"},
		{"trigger":	"CurrentSentence	AUDIO	 EVENT","contents": "CurrentSentence"},
		{"trigger":	"HandRightLeftTouched	SENSORS	 EVENT","contents": "HandRightLeftTouched"},
		{"trigger":	"MiddleTactilTouched	SENSORS	 EVENT","contents": "MiddleTactilTouched"},
		{"trigger":	"FaceDetected	VISION	 EVENT","contents": "FaceDetected"},
		{"trigger":	"BatteryFullChargedFlagChanged	SENSORS	 EVENT","contents": "BatteryFullChargedFlagChanged"},
		{"trigger":	"AlreadyAtTarget	MOTION	 EVENT","contents": "AlreadyAtTarget"},
		{"trigger":	"NetworkServiceRemoved	CONNECTIONMANAGER	 EVENT","contents": "NetworkServiceRemoved"},
		{"trigger":	"FrontTactilTouched	SENSORS	 EVENT","contents": "FrontTactilTouched"},
		{"trigger":	"BatteryChargeCellVoltageMinChanged	SENSORS	 EVENT","contents": "BatteryChargeCellVoltageMinChanged"},
		{"trigger":	"TextStarted	AUDIO	 EVENT","contents": "TextStarted"},
		{"trigger":	"Match	VISION	 EVENT","contents": "Match"},
		{"trigger":	"DoubleClickOccured	SENSORS	 EVENT","contents": "DoubleClickOccured"},
		{"trigger":	"ClientDisconnected	CORE	 EVENT","contents": "ClientDisconnected"},
		{"trigger":	"MovementDetected	VISION	 EVENT","contents": "MovementDetected"},
		{"trigger":	"robotPoseChanged	SENSORS	 EVENT","contents": "robotPoseChanged"},
		{"trigger":	"NetworkStateChanged	CONNECTIONMANAGER	 EVENT","contents": "NetworkStateChanged"},
		{"trigger":	"ClientConnected	CORE	 EVENT","contents": "ClientConnected"},
		{"trigger":	"NetworkServiceInputRequired	CONNECTIONMANAGER	 EVENT","contents": "NetworkServiceInputRequired"},
		{"trigger":	"BatteryDisChargingFlagChanged	SENSORS	 EVENT","contents": "BatteryDisChargingFlagChanged"},
		{"trigger":	"LandmarkDetected	VISION	 EVENT","contents": "LandmarkDetected"},
		{"trigger":	"HandRightRightTouched	SENSORS	 EVENT","contents": "HandRightRightTouched"},
		{"trigger":	"BlockingObstacle	MOTION	 EVENT","contents": "BlockingObstacle"},
		{"trigger":	"NetworkTechnologyAdded	CONNECTIONMANAGER	 EVENT","contents": "NetworkTechnologyAdded"},
		{"trigger":	"HandRightBackTouched	SENSORS	 EVENT","contents": "HandRightBackTouched"},
		{"trigger":	"SonarLeftDetected	SENSORS	 EVENT","contents": "SonarLeftDetected"},
		{"trigger":	"Status	MOTION	 EVENT","contents": "Status"},
		{"trigger":	"HandLeftLeftTouched	SENSORS	 EVENT","contents": "HandLeftLeftTouched"},
		{"trigger":	"robotHasFallen	MOTION	 EVENT","contents": "robotHasFallen"},
		{"trigger":	"HandLeftRightTouched	SENSORS	 EVENT","contents": "HandLeftRightTouched"},
		{"trigger":	"RightBumperPressed	SENSORS	 EVENT","contents": "RightBumperPressed"},
		{"trigger":	"TripleClickOccured	SENSORS	 EVENT","contents": "TripleClickOccured"},
		{"trigger":	"NetworkTechnologyRemoved	CONNECTIONMANAGER	 EVENT","contents": "NetworkTechnologyRemoved"},
		{"trigger":	"BacklightingDetected	VISION	 EVENT","contents": "BacklightingDetected"},
		{"trigger":	"BatteryPowerPluggedChanged	SENSORS	 EVENT","contents": "BatteryPowerPluggedChanged"},
		{"trigger":	"redBallDetected	VISION	 EVENT","contents": "redBallDetected"},
		{"trigger":	"SoundLocated	AUDIO	 EVENT","contents": "SoundLocated"},
		{"trigger":	"BatteryChargeChanged	SENSORS	 EVENT","contents": "BatteryChargeChanged"},
		{"trigger":	"RearTactilTouched	SENSORS	 EVENT","contents": "RearTactilTouched"},
		{"trigger":	"ChestButtonPressed	SENSORS	 EVENT","contents": "ChestButtonPressed"},
		{"trigger":	"HandLeftBackTouched	SENSORS	 EVENT","contents": "HandLeftBackTouched"},
		{"trigger":	"CurrentWord	AUDIO	 EVENT","contents": "CurrentWord"},
		{"trigger":	"DarknessDetected	VISION	 EVENT","contents": "DarknessDetected"},
		{"trigger":	"NetworkServiceStateChanged	CONNECTIONMANAGER	 EVENT","contents": "NetworkServiceStateChanged"},
		{"trigger":	"BatteryChargingFlagChanged	SENSORS	 EVENT","contents": "BatteryChargingFlagChanged"},
		{"trigger":	"NAOqiReady	CORE	 EVENT","contents": "NAOqiReady"},
		{"trigger":	"SimpleClickOccured	SENSORS	 EVENT","contents": "SimpleClickOccured"},
		{"trigger":	"HotJointDetected	SENSORS	 EVENT","contents": "HotJointDetected"},
		{"trigger":	"Deviation	VISION	 EVENT","contents": "Deviation"},
		{"trigger":	"BodyStiffnessChanged	SENSORS	 EVENT","contents": "BodyStiffnessChanged"},
		{"trigger":	"NetworkServiceAdded	CONNECTIONMANAGER	 EVENT","contents": "NetworkServiceAdded"},
		{"trigger":	"LastWordRecognized	AUDIO	 EVENT","contents": "LastWordRecognized"},
		{"trigger":	"footContactChanged	SENSORS	 EVENT","contents": "footContactChanged"},
		{"trigger":	"CurrentBookMark	AUDIO	 EVENT","contents": "CurrentBookMark"},
		{"trigger":	"TextDone	AUDIO	 EVENT","contents": "TextDone"},
		{"trigger":	"PictureDetected	VISION	 EVENT","contents": "PictureDetected"},
		{"trigger":	"SpeechDetected	AUDIO	 EVENT","contents": "SpeechDetected"}
	]
}
